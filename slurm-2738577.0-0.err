	[exampi::MemoryPool<T>::MemoryPool(size_t) [with T = exampi::Request; size_t = long unsigned int]]
		0   95: 		  95: free_list starts at: 0x6775a0
	[exampi::Universe::Universe()]
		1   21: 		  21: creating universe
		1   39: 		  39: rank 0
		1   46: 		  46: epoch file /var/tmp/sultana1/exampi_7MANGw.2738577.0
		1   53: 		  53: epoch 0
		1   60: 		  60: world size 8
		1   64: 		  64: mpi stages enabled 0
		1   71: 		  71: finished creating universe
	[virtual int exampi::BasicInterface::MPI_Init(int*, char***)]
		2   31: 		  31: MPI_Init entered. argc=6
		2   39: 		  39: MPI_Init passed EXAMPI_LAUNCHED check.
	[exampi::MemoryPool<T>::MemoryPool(size_t) [with T = exampi::Header; size_t = long unsigned int]]
		3   95: 		  95: free_list starts at: 0x67b6b0
	[exampi::MemoryPool<T>::MemoryPool(size_t) [with T = exampi::UDPTransportPayload; size_t = long unsigned int]]
		4   95: 		  95: free_list starts at: 0x2aaaabb5b010
	[exampi::UDPTransport::UDPTransport()]
		5   34: 		  34: udp transport port: 33421
	[exampi::Config::Config()]
		6   17: 		  17: config loading /var/tmp/sultana1/exampi_KCWc2e.2738577.0
	[exampi::BlockingProgress::BlockingProgress(std::unique_ptr<exampi::Matcher>, std::unique_ptr<exampi::Transport>, std::unique_ptr<exampi::Decider>)]
		7   39: 		  39: starting progress thread 0
		7   44: 		  44: progress threads running
	[virtual int exampi::BasicInterface::MPI_Init(int*, char***)]
		8   47: 		  47: generating world group
		8   51: 		  51: generating world communicator
		8   54: 		  54: generating universe datatypes
		8   58: 		  58: executing daemon barrier 0
	[exampi::Daemon::Daemon()]
		9   38: 		  38: getting hostname as quartz29
		9   42: 		  42: getting local ip as 192.168.128.29
		9   45: 		  45: daemon port 28579
		9   52: 		  52: generated daemon sockaddr_in
		9   57: 		  57: attempting connection to daemon
		9   73: 		  73: tcp connection to daemon established
	[int exampi::Daemon::send_barrier_ready()]
		10  132: 		 132: send_barrier_ready:barrier 0 168248                                                 64
	[int exampi::Daemon::send(std::__cxx11::string)]
		11  229: 		 229: send packet to daemon: barrier 0 168248                                                
	[int exampi::Daemon::recv_barrier_release()]
		12  141: 		 141: in recv_barrier_release 0
		12  145: 		 145: rank recv barrier release 64 msg release
		12  152: 		 152: rank 0 recv barrier release
		12  153: 		 153: rank 0 release
	[int exampi::Daemon::barrier()]
		13   91: 		  91: daemon: barrier complete
	[virtual int exampi::BasicInterface::MPI_Comm_size(MPI_Comm, int*)]
		14  742: 		 742: checking mpi stages error state
		14  750: 		 750: called MPI_Comm_size: 8
	[virtual int exampi::BasicInterface::MPI_Comm_rank(MPI_Comm, int*)]
		15  727: 		 727: checking mpi stages error state
		15  735: 		 735: called MPI_Comm_rank: 0
		15  727: 		 727: checking mpi stages error state
		15  735: 		 735: called MPI_Comm_rank: 0
		15  727: 		 727: checking mpi stages error state
		15  735: 		 735: called MPI_Comm_rank: 0
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		16  355: 		 355: entry MPI_Irend with buf 0x2aaaac605010 count 961 src 4 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		17  227: 		 227: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		18  487: 		 487: sanitizing user input
		18  494: 		 494: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		19  367: 		 367: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		20  113: 		 113: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		21  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		21  121: 		 121: free_list 0x6775a0
		21  124: 		 124: new free_list 0x677610
		21  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		22  406: 		 406: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		23  244: 		 244: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		24  508: 		 508: checking mpi stages error state
		24  515: 		 515: translating request
		24  519: 		 519: persistent check
		24  526: 		 526: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		25   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		26   73: 		  73: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		27  355: 		 355: entry MPI_Irend with buf 0x2aaaac606e90 count 961 src 2 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		28  227: 		 227: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		29  487: 		 487: sanitizing user input
		29  494: 		 494: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		30  367: 		 367: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		31  113: 		 113: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		32  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		32  121: 		 121: free_list 0x677610
		32  124: 		 124: new free_list 0x677680
		32  132: 		 132: item is number 2
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		33  406: 		 406: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		34  244: 		 244: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		35  508: 		 508: checking mpi stages error state
		35  515: 		 515: translating request
		35  519: 		 519: persistent check
		35  526: 		 526: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		36   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		37   73: 		  73: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		38  355: 		 355: entry MPI_Irend with buf 0x2aaaac608d10 count 961 src 1 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		39  227: 		 227: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		40  487: 		 487: sanitizing user input
		40  494: 		 494: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		41  367: 		 367: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		42  113: 		 113: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		43  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		43  121: 		 121: free_list 0x677680
		43  124: 		 124: new free_list 0x6776f0
		43  132: 		 132: item is number 3
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		44  406: 		 406: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		45  244: 		 244: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		46  508: 		 508: checking mpi stages error state
		46  515: 		 515: translating request
		46  519: 		 519: persistent check
		46  526: 		 526: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		47   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		48   73: 		  73: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		49  355: 		 355: entry MPI_Irend with buf 0x2aaaac60ab90 count 31 src 3 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		50  227: 		 227: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		51  487: 		 487: sanitizing user input
		51  494: 		 494: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		52  367: 		 367: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		53  113: 		 113: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		54  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		54  121: 		 121: free_list 0x6776f0
		54  124: 		 124: new free_list 0x677760
		54  132: 		 132: item is number 4
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		55  406: 		 406: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		56  244: 		 244: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		57  508: 		 508: checking mpi stages error state
		57  515: 		 515: translating request
		57  519: 		 519: persistent check
		57  526: 		 526: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		58   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		59   73: 		  73: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		60  355: 		 355: entry MPI_Irend with buf 0x2aaaac60ac90 count 31 src 6 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		61  227: 		 227: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		62  487: 		 487: sanitizing user input
		62  494: 		 494: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		63  367: 		 367: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		64  113: 		 113: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		65  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		65  121: 		 121: free_list 0x677760
		65  124: 		 124: new free_list 0x6777d0
		65  132: 		 132: item is number 5
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		66  406: 		 406: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		67  244: 		 244: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		68  508: 		 508: checking mpi stages error state
		68  515: 		 515: translating request
		68  519: 		 519: persistent check
		68  526: 		 526: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		69   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		70   73: 		  73: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		71  355: 		 355: entry MPI_Irend with buf 0x2aaaac60ad90 count 31 src 5 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		72  227: 		 227: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		73  487: 		 487: sanitizing user input
		73  494: 		 494: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		74  367: 		 367: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		75  113: 		 113: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		76  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		76  121: 		 121: free_list 0x6777d0
		76  124: 		 124: new free_list 0x677840
		76  132: 		 132: item is number 6
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		77  406: 		 406: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		78  244: 		 244: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		79  508: 		 508: checking mpi stages error state
		79  515: 		 515: translating request
		79  519: 		 519: persistent check
		79  526: 		 526: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		80   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		81   73: 		  73: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		82  355: 		 355: entry MPI_Irend with buf 0x2aaaac60ae90 count 1 src 7 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		83  227: 		 227: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		84  487: 		 487: sanitizing user input
		84  494: 		 494: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		85  367: 		 367: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		86  113: 		 113: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		87  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		87  121: 		 121: free_list 0x677840
		87  124: 		 124: new free_list 0x6778b0
		87  132: 		 132: item is number 7
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		88  406: 		 406: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		89  244: 		 244: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		90  508: 		 508: checking mpi stages error state
		90  515: 		 515: translating request
		90  519: 		 519: persistent check
		90  526: 		 526: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		91   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		92   73: 		  73: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Comm_rank(MPI_Comm, int*)]
		93  727: 		 727: checking mpi stages error state
		93  735: 		 735: called MPI_Comm_rank: 0

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		0  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		1  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		1  121: 		 121: free_list 0x67b6b0
		1  124: 		 124: new free_list 0x67b6c8
		1  132: 		 132: item is number 1

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		94  329: 		 329: entry MPI_Isend with buf 0x2aaaac5e1010 count 961 dest 4 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		95  203: 		 203: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		96  421: 		 421: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		97  367: 		 367: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		98  113: 		 113: allocating request from memory pool

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		0  143: 		 143: received header + size of size 28
		0  148: 		 148: header: e 0 c 0 s 4 d 0 t 1024
		0  149: 		 149: payload length 7688
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		1  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		1  121: 		 121: free_list 0x2aaaabb5b010

[thread  main]  [include/pool.h]
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		99  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		99  121: 		 121: free_list 0x6778b0
		99  124: 		 124: new free_list 0x677920
		99  132: 		 132: item is number 8
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		100  406: 		 406: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		101  244: 		 244: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		102  508: 		 508: checking mpi stages error state
		102  515: 		 515: translating request
		102  519: 		 519: persistent check
		102  526: 		 526: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		103  105: 		 105: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		104  329: 		 329: entry MPI_Isend with buf 0x2aaaac5e2e90 count 961 dest 2 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		105  203: 		 203: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		106  421: 		 421: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		107  367: 		 367: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		108  113: 		 113: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		109  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		109  121: 		 121: free_list 0x677920
		109  124: 		 124: new free_list 0x677990
		109  132: 		 132: item is number 9
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		110  406: 		 406: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		111  244: 		 244: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		112  508: 		 508: checking mpi stages error state
		112  515: 		 515: translating request
		112  519: 		 519: persistent check
		112  526: 		 526: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		113  105: 		 105: put *send request into outbox

[thread undef] [include/pool.h]
		1  124: 		 124: new free_list 0x2aaaabb6afd8

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		114  329: 		 329: entry MPI_Isend with buf 0x2aaaac5e4d10 count 961 dest 1 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		115  203: 		 203: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		116  421: 		 421: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		117  367: 		 367: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		118  113: 		 113: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		119  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		119  121: 		 121: free_list 0x677990
		119  124: 		 124: new free_list 0x677a00
		119  132: 		 132: item is number 10
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		120  406: 		 406: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		121  244: 		 244: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		122  508: 		 508: checking mpi stages error state
		122  515: 		 515: translating request
		122  519: 		 519: persistent check
		122  526: 		 526: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		123  105: 		 105: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		124  329: 		 329: entry MPI_Isend with buf 0x2aaaac5e6b90 count 31 dest 3 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		125  203: 		 203: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		126  421: 		 421: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		127  367: 		 367: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		128  113: 		 113: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		129  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		129  121: 		 121: free_list 0x677a00
		129  124: 		 124: new free_list 0x677a70
		129  132: 		 132: item is number 11
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		130  406: 		 406: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		131  244: 		 244: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		132  508: 		 508: checking mpi stages error state
		132  515: 		 515: translating request
		132  519: 		 519: persistent check
		132  526: 		 526: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		133  105: 		 105: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		134  329: 		 329: entry MPI_Isend with buf 0x2aaaac5e6c90 count 31 dest 6 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		135  203: 		 203: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		136  421: 		 421: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		137  367: 		 367: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		138  113: 		 113: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		139  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		139  121: 		 121: free_list 0x677a70
		139  124: 		 124: new free_list 0x677ae0
		139  132: 		 132: item is number 12
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		140  406: 		 406: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		141  244: 		 244: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		142  508: 		 508: checking mpi stages error state
		142  515: 		 515: translating request
		142  519: 		 519: persistent check
		142  526: 		 526: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		143  105: 		 105: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		144  329: 		 329: entry MPI_Isend with buf 0x2aaaac5e6d90 count 31 dest 5 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		145  203: 		 203: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		146  421: 		 421: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		147  367: 		 367: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		148  113: 		 113: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		149  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		149  121: 		 121: free_list 0x677ae0
		149  124: 		 124: new free_list 0x677b50
		149  132: 		 132: item is number 13
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		150  406: 		 406: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		151  244: 		 244: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		152  508: 		 508: checking mpi stages error state
		152  515: 		 515: translating request
		152  519: 		 519: persistent check
		152  526: 		 526: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		153  105: 		 105: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		154  329: 		 329: entry MPI_Isend with buf 0x2aaaac5e6e90 count 1 dest 7 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		155  203: 		 203: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		156  421: 		 421: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		157  367: 		 367: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		158  113: 		 113: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		159  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		159  121: 		 121: free_list 0x677b50
		159  124: 		 124: new free_list 0x677bc0
		159  132: 		 132: item is number 14
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		160  406: 		 406: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		161  244: 		 244: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		162  508: 		 508: checking mpi stages error state
		162  515: 		 515: translating request
		162  519: 		 519: persistent check
		162  526: 		 526: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		163  105: 		 105: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Waitall(int, MPI_Request*, MPI_Status*)]
		164  637: 		 637: checking mpi stages error state
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		165  571: 		 571: sanitizing user input
		165  574: 		 574: checking mpi stages error state
		165  577: 		 577: checking 0x67e7b0 == MPI_REQUEST_NULL 0
		165  586: 		 586: translated MPI_Request to Request_ptr: 0x6778b0
		165  590: 		 590: checking persistent 0 and inactive 0
		165  605: 		 605: checking if request complete 0
		165  608: 		 608: will wait for completion
		165  613: 		 613: acquired lock on request

[thread undef] [include/pool.h]
		1  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		0  177: 		 177: received payload of size 7716
	[void exampi::BlockingProgress::progress()]
		1  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		2   28: 		  28: posting message in matcher
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		3  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		4  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		4  121: 		 121: free_list 0x67b6c8
		4  124: 		 124: new free_list 0x67b6e0
		4  132: 		 132: item is number 2
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		3  143: 		 143: received header + size of size 28
		3  148: 		 148: header: e 0 c 0 s 2 d 0 t 1024
		3  149: 		 149: payload length 7688
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		4  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		4  121: 		 121: free_list 0x2aaaabb6afd8
		4  124: 		 124: new free_list 0x2aaaabb7afa0
		4  132: 		 132: item is number 2
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		3  177: 		 177: received payload of size 7716
	[void exampi::BlockingProgress::progress()]
		4  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		5   28: 		  28: posting message in matcher
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		6  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		7  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		7  121: 		 121: free_list 0x67b6e0
		7  124: 		 124: new free_list 0x67b6f8
		7  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		6  143: 		 143: received header + size of size 28
		6  148: 		 148: header: e 0 c 0 s 3 d 0 t 1024
		6  149: 		 149: payload length 248
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		7  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		7  121: 		 121: free_list 0x2aaaabb7afa0
		7  124: 		 124: new free_list 0x2aaaabb8af68
		7  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		6  177: 		 177: received payload of size 276
	[void exampi::BlockingProgress::progress()]
		7  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		8   28: 		  28: posting message in matcher
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		9  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		10  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		10  121: 		 121: free_list 0x67b6f8
		10  124: 		 124: new free_list 0x67b710
		10  132: 		 132: item is number 4
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		9  143: 		 143: received header + size of size 28
		9  148: 		 148: header: e 0 c 0 s 6 d 0 t 1024
		9  149: 		 149: payload length 248
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		10  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		10  121: 		 121: free_list 0x2aaaabb8af68
		10  124: 		 124: new free_list 0x2aaaabb9af30
		10  132: 		 132: item is number 4
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		9  177: 		 177: received payload of size 276
	[void exampi::BlockingProgress::progress()]
		10  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		11   28: 		  28: posting message in matcher
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		12  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		13  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		13  121: 		 121: free_list 0x67b710
		13  124: 		 124: new free_list 0x67b728
		13  132: 		 132: item is number 5
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		12  143: 		 143: received header + size of size 28
		12  148: 		 148: header: e 0 c 0 s 5 d 0 t 1024
		12  149: 		 149: payload length 248
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		13  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		13  121: 		 121: free_list 0x2aaaabb9af30
		13  124: 		 124: new free_list 0x2aaaabbaaef8
		13  132: 		 132: item is number 5
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		12  177: 		 177: received payload of size 276
	[void exampi::BlockingProgress::progress()]
		13  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		14   28: 		  28: posting message in matcher
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		15  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		16  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		16  121: 		 121: free_list 0x67b728
		16  124: 		 124: new free_list 0x67b740
		16  132: 		 132: item is number 6
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		15  143: 		 143: received header + size of size 28
		15  148: 		 148: header: e 0 c 0 s 1 d 0 t 1024
		15  149: 		 149: payload length 7688
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		16  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		16  121: 		 121: free_list 0x2aaaabbaaef8
		16  124: 		 124: new free_list 0x2aaaabbbaec0
		16  132: 		 132: item is number 6
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		15  177: 		 177: received payload of size 7716
	[void exampi::BlockingProgress::progress()]
		16  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		17   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		18   59: 		  59: found requests and messages to match
		18   70: 		  70: picked up request: 0x6775a0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		19   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 4 == 4, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		18   99: 		  99: found match, generating match object
		18  103: 		 103: header 0x67b6b0 == 0x6775a0
		18  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		19  131: 		 131: progress thread, matched header 0x67b6b0 == request 0x6775a0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		20  170: 		 170: handling matched request <-> protocol message
		20  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		21  140: 		 140: freeing item, now at 6 items : arenas 1 pointer 0x2aaaabb5b010
		21  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		22  140: 		 140: freeing item, now at 6 items : arenas 1 pointer 0x67b6b0
		22  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		23   31: 		  31: request lock acquired
		23   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		24  193: 		 193: request completed and released
	[void exampi::BlockingProgress::progress()]
		25  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		26  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		27  229: 		 229: envelope to send: e 0 c 0 s 0 d 4 t 1024
		27  259: 		 259: sent 7716 bytes
	[void exampi::Request::release()]
		28   31: 		  31: request lock acquired
		28   40: 		  40: notifying waiting thread
		28   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		29  143: 		 143: sent message
		29  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		30  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		31  229: 		 229: envelope to send: e 0 c 0 s 0 d 2 t 1024

[thread  main]  [src/interfaces/interface.cc]
		165  621: 		 621: finished waiting
		165  627: 		 627: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		166  158: 		 158: sanitizing user input
		166  160: 		 160: checking mpi stages error state
		166  180: 		 180: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		167  119: 		 119: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		168  140: 		 140: freeing item, now at 14 items : arenas 1 pointer 0x6778b0
		168  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		169  188: 		 188: invalidating user MPI_Request handle: addr 0x67e7b0
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		170  564: 		 564: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		171  571: 		 571: sanitizing user input
		171  574: 		 574: checking mpi stages error state
		171  577: 		 577: checking 0x67e7b8 == MPI_REQUEST_NULL 0
		171  586: 		 586: translated MPI_Request to Request_ptr: 0x677920
		171  590: 		 590: checking persistent 0 and inactive 0
		171  605: 		 605: checking if request complete 0
		171  608: 		 608: will wait for completion
		171  613: 		 613: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
		31  259: 		 259: sent 7716 bytes
	[void exampi::Request::release()]
		32   31: 		  31: request lock acquired
		32   40: 		  40: notifying waiting thread
		32   45: 		  45: released request entirely

[thread  main]  [src/interfaces/interface.cc]
		171  621: 		 621: finished waiting
		171  627: 		 627: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		172  158: 		 158: sanitizing user input
		172  160: 		 160: checking mpi stages error state
		172  180: 		 180: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		173  119: 		 119: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		174  140: 		 140: freeing item, now at 13 items : arenas 1 pointer 0x677920
		174  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		175  188: 		 188: invalidating user MPI_Request handle: addr 0x67e7b8
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		176  564: 		 564: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		177  571: 		 571: sanitizing user input
		177  574: 		 574: checking mpi stages error state
		177  577: 		 577: checking 0x67e7c0 == MPI_REQUEST_NULL 0
		177  586: 		 586: translated MPI_Request to Request_ptr: 0x677990
		177  590: 		 590: checking persistent 0 and inactive 0
		177  605: 		 605: checking if request complete 0
		177  608: 		 608: will wait for completion
		177  613: 		 613: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
	[void exampi::BlockingProgress::progress()]
		33  143: 		 143: sent message
		33  158: 		 158: progress thread, going to sleep forcefully
		33  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		34  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		35  229: 		 229: envelope to send: e 0 c 0 s 0 d 1 t 1024
		35  259: 		 259: sent 7716 bytes
	[void exampi::Request::release()]
		36   31: 		  31: request lock acquired
		36   40: 		  40: notifying waiting thread
		36   45: 		  45: released request entirely

[thread  main]  [src/interfaces/interface.cc]
		177  621: 		 621: finished waiting
		177  627: 		 627: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		178  158: 		 158: sanitizing user input
		178  160: 		 160: checking mpi stages error state
		178  180: 		 180: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		179  119: 		 119: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		180  140: 		 140: freeing item, now at 12 items : arenas 1 pointer 0x677990
		180  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		181  188: 		 188: invalidating user MPI_Request handle: addr 0x67e7c0
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		182  564: 		 564: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		183  571: 		 571: sanitizing user input
		183  574: 		 574: checking mpi stages error state
		183  577: 		 577: checking 0x67e7c8 == MPI_REQUEST_NULL 0
		183  586: 		 586: translated MPI_Request to Request_ptr: 0x677a00
		183  590: 		 590: checking persistent 0 and inactive 0
		183  605: 		 605: checking if request complete 0
		183  608: 		 608: will wait for completion
		183  613: 		 613: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
	[void exampi::BlockingProgress::progress()]
		37  143: 		 143: sent message
		37  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		38  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		39  229: 		 229: envelope to send: e 0 c 0 s 0 d 3 t 1024
		39  259: 		 259: sent 276 bytes
	[void exampi::Request::release()]
		40   31: 		  31: request lock acquired
		40   40: 		  40: notifying waiting thread
		40   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		41  143: 		 143: sent message
		41  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		42  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		43  229: 		 229: envelope to send: e 0 c 0 s 0 d 6 t 1024

[thread  main]  [src/interfaces/interface.cc]
		183  621: 		 621: finished waiting
		183  627: 		 627: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		184  158: 		 158: sanitizing user input
		184  160: 		 160: checking mpi stages error state
		184  180: 		 180: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		185  119: 		 119: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		186  140: 		 140: freeing item, now at 11 items : arenas 1 pointer 0x677a00
		186  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		187  188: 		 188: invalidating user MPI_Request handle: addr 0x67e7c8
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		188  564: 		 564: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		189  571: 		 571: sanitizing user input
		189  574: 		 574: checking mpi stages error state
		189  577: 		 577: checking 0x67e7d0 == MPI_REQUEST_NULL 0
		189  586: 		 586: translated MPI_Request to Request_ptr: 0x677a70
		189  590: 		 590: checking persistent 0 and inactive 0
		189  605: 		 605: checking if request complete 0
		189  608: 		 608: will wait for completion
		189  613: 		 613: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
		43  259: 		 259: sent 276 bytes
	[void exampi::Request::release()]
		44   31: 		  31: request lock acquired
		44   40: 		  40: notifying waiting thread
		44   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		45  143: 		 143: sent message
		45  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		46  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		47  229: 		 229: envelope to send: e 0 c 0 s 0 d 5 t 1024

[thread  main]  [src/interfaces/interface.cc]
		189  621: 		 621: finished waiting
		189  627: 		 627: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		190  158: 		 158: sanitizing user input
		190  160: 		 160: checking mpi stages error state
		190  180: 		 180: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		191  119: 		 119: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		192  140: 		 140: freeing item, now at 10 items : arenas 1 pointer 0x677a70
		192  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		193  188: 		 188: invalidating user MPI_Request handle: addr 0x67e7d0
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		194  564: 		 564: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		195  571: 		 571: sanitizing user input
		195  574: 		 574: checking mpi stages error state
		195  577: 		 577: checking 0x67e7d8 == MPI_REQUEST_NULL 0
		195  586: 		 586: translated MPI_Request to Request_ptr: 0x677ae0
		195  590: 		 590: checking persistent 0 and inactive 0
		195  605: 		 605: checking if request complete 0
		195  608: 		 608: will wait for completion
		195  613: 		 613: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
		47  259: 		 259: sent 276 bytes
	[void exampi::Request::release()]
		48   31: 		  31: request lock acquired
		48   40: 		  40: notifying waiting thread
		48   45: 		  45: released request entirely

[thread  main]  [src/interfaces/interface.cc]
		195  621: 		 621: finished waiting
		195  627: 		 627: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		196  158: 		 158: sanitizing user input
		196  160: 		 160: checking mpi stages error state
		196  180: 		 180: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		197  119: 		 119: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		198  140: 		 140: freeing item, now at 9 items : arenas 1 pointer 0x677ae0
		198  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		199  188: 		 188: invalidating user MPI_Request handle: addr 0x67e7d8
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		200  564: 		 564: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		201  571: 		 571: sanitizing user input
		201  574: 		 574: checking mpi stages error state
		201  577: 		 577: checking 0x67e7e0 == MPI_REQUEST_NULL 0
		201  586: 		 586: translated MPI_Request to Request_ptr: 0x677b50
		201  590: 		 590: checking persistent 0 and inactive 0
		201  605: 		 605: checking if request complete 0
		201  608: 		 608: will wait for completion
		201  613: 		 613: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
	[void exampi::BlockingProgress::progress()]
		49  143: 		 143: sent message
		49  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		50  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		51  229: 		 229: envelope to send: e 0 c 0 s 0 d 7 t 1024
		51  259: 		 259: sent 36 bytes
	[void exampi::Request::release()]
		52   31: 		  31: request lock acquired
		52   40: 		  40: notifying waiting thread
		52   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		53  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		201  621: 		 621: finished waiting
		201  627: 		 627: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		202  158: 		 158: sanitizing user input
		202  160: 		 160: checking mpi stages error state
		202  180: 		 180: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		203  119: 		 119: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		204  140: 		 140: freeing item, now at 8 items : arenas 1 pointer 0x677b50
		204  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		205  188: 		 188: invalidating user MPI_Request handle: addr 0x67e7e0
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		206  564: 		 564: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Comm_rank(MPI_Comm, int*)]
		207  727: 		 727: checking mpi stages error state
		207  735: 		 735: called MPI_Comm_rank: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		208  571: 		 571: sanitizing user input
		208  574: 		 574: checking mpi stages error state
		208  577: 		 577: checking 0x67e6e0 == MPI_REQUEST_NULL 0
		208  586: 		 586: translated MPI_Request to Request_ptr: 0x6775a0
		208  590: 		 590: checking persistent 0 and inactive 0
		208  605: 		 605: checking if request complete 1
		208  627: 		 627: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		209  158: 		 158: sanitizing user input
		209  160: 		 160: checking mpi stages error state
		209  180: 		 180: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		210  119: 		 119: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		211  140: 		 140: freeing item, now at 7 items : arenas 1 pointer 0x6775a0
		211  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		212  188: 		 188: invalidating user MPI_Request handle: addr 0x67e6e0
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		213  564: 		 564: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		214  571: 		 571: sanitizing user input
		214  574: 		 574: checking mpi stages error state
		214  577: 		 577: checking 0x67e6e8 == MPI_REQUEST_NULL 0
		214  586: 		 586: translated MPI_Request to Request_ptr: 0x677610
		214  590: 		 590: checking persistent 0 and inactive 0
		214  605: 		 605: checking if request complete 0
		214  608: 		 608: will wait for completion
		214  613: 		 613: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		54  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		55  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		55  121: 		 121: free_list 0x67b6b0
		55  124: 		 124: new free_list 0x67b740
		55  132: 		 132: item is number 6
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		54  143: 		 143: received header + size of size 28
		54  148: 		 148: header: e 0 c 0 s 7 d 0 t 1024
		54  149: 		 149: payload length 8
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		55  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		55  121: 		 121: free_list 0x2aaaabb5b010
		55  124: 		 124: new free_list 0x2aaaabbbaec0
		55  132: 		 132: item is number 6
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		54  177: 		 177: received payload of size 36
	[void exampi::BlockingProgress::progress()]
		53  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		54   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		55   59: 		  59: found requests and messages to match
		55   70: 		  70: picked up request: 0x677610
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		56   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 2, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		55   99: 		  99: found match, generating match object
		55  103: 		 103: header 0x67b6c8 == 0x677610
		55  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		56  131: 		 131: progress thread, matched header 0x67b6c8 == request 0x677610
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		57  170: 		 170: handling matched request <-> protocol message
		57  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		58  140: 		 140: freeing item, now at 6 items : arenas 1 pointer 0x2aaaabb6afd8
		58  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		59  140: 		 140: freeing item, now at 6 items : arenas 1 pointer 0x67b6c8
		59  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		60   31: 		  31: request lock acquired
		60   40: 		  40: notifying waiting thread
		60   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		61  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		214  621: 		 621: finished waiting
		214  627: 		 627: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		215  158: 		 158: sanitizing user input
		215  160: 		 160: checking mpi stages error state
		215  180: 		 180: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		216  119: 		 119: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		217  140: 		 140: freeing item, now at 6 items : arenas 1 pointer 0x677610
		217  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		218  188: 		 188: invalidating user MPI_Request handle: addr 0x67e6e8
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		219  564: 		 564: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		220  571: 		 571: sanitizing user input
		220  574: 		 574: checking mpi stages error state
		220  577: 		 577: checking 0x67e6f0 == MPI_REQUEST_NULL 0
		220  586: 		 586: translated MPI_Request to Request_ptr: 0x677680
		220  590: 		 590: checking persistent 0 and inactive 0
		220  605: 		 605: checking if request complete 0
		220  608: 		 608: will wait for completion
		220  613: 		 613: acquired lock on request
