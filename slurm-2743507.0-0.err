	[exampi::MemoryPool<T>::MemoryPool(size_t) [with T = exampi::Request; size_t = long unsigned int]]
		0   95: 		  95: free_list starts at: 0x65bce0
	[exampi::Universe::Universe()]
		1   21: 		  21: creating universe
		1   39: 		  39: rank 0
		1   46: 		  46: epoch file /var/tmp/sultana1/exampi_r5mpVy.2743507.0
		1   53: 		  53: epoch 0
		1   60: 		  60: world size 4
		1   64: 		  64: mpi stages enabled 0
		1   71: 		  71: finished creating universe
	[virtual int exampi::BasicInterface::MPI_Init(int*, char***)]
		2   31: 		  31: MPI_Init entered. argc=1
		2   39: 		  39: MPI_Init passed EXAMPI_LAUNCHED check.
	[exampi::MemoryPool<T>::MemoryPool(size_t) [with T = exampi::Header; size_t = long unsigned int]]
		3   95: 		  95: free_list starts at: 0x65fdf0
	[exampi::MemoryPool<T>::MemoryPool(size_t) [with T = exampi::UDPTransportPayload; size_t = long unsigned int]]
		4   95: 		  95: free_list starts at: 0x2aaaabb5b010
	[exampi::UDPTransport::UDPTransport()]
		5   36: 		  36: udp transport port: 33421
	[exampi::Config::Config()]
		6   17: 		  17: config loading /var/tmp/sultana1/exampi_Nyo1_V.2743507.0
	[exampi::BlockingProgress::BlockingProgress(std::unique_ptr<exampi::Matcher>, std::unique_ptr<exampi::Transport>, std::unique_ptr<exampi::Decider>)]
		7   39: 		  39: starting progress thread 0
		7   44: 		  44: progress threads running
	[virtual int exampi::BasicInterface::MPI_Init(int*, char***)]
		8   47: 		  47: generating world group
		8   51: 		  51: generating world communicator
		8   54: 		  54: generating universe datatypes
		8   58: 		  58: executing daemon barrier 0
	[exampi::Daemon::Daemon()]
		9   38: 		  38: getting hostname as quartz22
		9   42: 		  42: getting local ip as 192.168.128.22
		9   45: 		  45: daemon port 26097
		9   52: 		  52: generated daemon sockaddr_in
		9   57: 		  57: attempting connection to daemon
		9   73: 		  73: tcp connection to daemon established
	[int exampi::Daemon::send_barrier_ready()]
		10  132: 		 132: send_barrier_ready:barrier 0 134659                                                 64
	[int exampi::Daemon::send(std::__cxx11::string)]
		11  229: 		 229: send packet to daemon: barrier 0 134659                                                
	[int exampi::Daemon::recv_barrier_release()]
		12  141: 		 141: in recv_barrier_release 0
		12  145: 		 145: rank recv barrier release 64 msg release
		12  152: 		 152: rank 0 recv barrier release
		12  153: 		 153: rank 0 release
	[int exampi::Daemon::barrier()]
		13   91: 		  91: daemon: barrier complete
	[virtual int exampi::BasicInterface::MPI_Comm_rank(MPI_Comm, int*)]
		14  726: 		 726: checking mpi stages error state
		14  734: 		 734: called MPI_Comm_rank: 0
	[virtual int exampi::BasicInterface::MPI_Comm_size(MPI_Comm, int*)]
		15  741: 		 741: checking mpi stages error state
		15  749: 		 749: called MPI_Comm_size: 4
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		16  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		17  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		18  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		19  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		20  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		21  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		22  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		22  121: 		 121: free_list 0x65bce0
		22  124: 		 124: new free_list 0x65bd50
		22  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		23  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		24  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		25  507: 		 507: checking mpi stages error state
		25  514: 		 514: translating request
		25  518: 		 518: persistent check
		25  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		26  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		27  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		28  570: 		 570: sanitizing user input
		28  573: 		 573: checking mpi stages error state
		28  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		28  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		28  589: 		 589: checking persistent 0 and inactive 0
		28  604: 		 604: checking if request complete 0
		28  607: 		 607: will wait for completion
		28  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
	[void exampi::BlockingProgress::progress()]
		0  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		1  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		2  235: 		 235: envelope to send:  e 0 c 0 s 0 d 1 t 0
		2  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		3   31: 		  31: request lock acquired
		3   40: 		  40: notifying waiting thread
		3   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		4  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		28  620: 		 620: finished waiting
		28  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		29  157: 		 157: sanitizing user input
		29  159: 		 159: checking mpi stages error state
		29  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		30  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		31  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		31  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		32  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		33  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		34  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		35  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		36  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		37  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		38  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		39  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		40  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		40  121: 		 121: free_list 0x65bce0
		40  124: 		 124: new free_list 0
		40  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		41  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		42  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		43  507: 		 507: checking mpi stages error state
		43  514: 		 514: translating request
		43  518: 		 518: persistent check
		43  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		44  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		45  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		46  570: 		 570: sanitizing user input
		46  573: 		 573: checking mpi stages error state
		46  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		46  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		46  589: 		 589: checking persistent 0 and inactive 0
		46  604: 		 604: checking if request complete 0
		46  607: 		 607: will wait for completion
		46  612: 		 612: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		5  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		6  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		6  121: 		 121: free_list 0x65fdf0
		6  124: 		 124: new free_list 0x65fe08
		6  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		5  146: 		 146: received header + size of size 28
		5  151: 		 151: header: e 0 c 0 s 3 d 0 t 0
		5  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		6  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		6  121: 		 121: free_list 0x2aaaabb5b010
		6  124: 		 124: new free_list 0x2aaaabb6afd8
		6  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		5  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		4  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		5   27: 		  27: posting message in matcher
	[void exampi::BlockingProgress::progress()]
		4  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		5  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		6  235: 		 235: envelope to send:  e 0 c 0 s 0 d 2 t 0
		6  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		7   31: 		  31: request lock acquired
		7   40: 		  40: notifying waiting thread
		7   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		8  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		46  620: 		 620: finished waiting
		46  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		47  157: 		 157: sanitizing user input
		47  159: 		 159: checking mpi stages error state
		47  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		48  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		49  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		49  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		50  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		51  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		52  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		53  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		54  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		55  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		56  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		57  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		58  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		58  121: 		 121: free_list 0x65bce0
		58  124: 		 124: new free_list 0
		58  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		59  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		60  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		61  507: 		 507: checking mpi stages error state
		61  514: 		 514: translating request
		61  518: 		 518: persistent check
		61  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		62  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		63  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		64  570: 		 570: sanitizing user input
		64  573: 		 573: checking mpi stages error state
		64  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		64  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		64  589: 		 589: checking persistent 0 and inactive 0
		64  604: 		 604: checking if request complete 0
		64  607: 		 607: will wait for completion
		64  612: 		 612: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		9  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		10  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		10  121: 		 121: free_list 0x65fe08
		10  124: 		 124: new free_list 0x65fe20
		10  132: 		 132: item is number 2
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		9  146: 		 146: received header + size of size 28
		9  151: 		 151: header: e 0 c 0 s 2 d 0 t 0
		9  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		10  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		10  121: 		 121: free_list 0x2aaaabb6afd8
		10  124: 		 124: new free_list 0x2aaaabb7afa0
		10  132: 		 132: item is number 2
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		9  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		8  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		9   27: 		  27: posting message in matcher
	[void exampi::BlockingProgress::progress()]
		8  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		9  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		10  235: 		 235: envelope to send:  e 0 c 0 s 0 d 3 t 0
		10  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		11   31: 		  31: request lock acquired
		11   40: 		  40: notifying waiting thread
		11   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		12  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		64  620: 		 620: finished waiting
		64  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		65  157: 		 157: sanitizing user input
		65  159: 		 159: checking mpi stages error state
		65  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		66  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		67  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		67  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		68  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		69  563: 		 563: returning with error: 0

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		13  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		14  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		14  121: 		 121: free_list 0x65fe20
		14  124: 		 124: new free_list 0x65fe38
		14  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		13  146: 		 146: received header + size of size 28
		13  151: 		 151: header: e 0 c 0 s 1 d 0 t 0
		13  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		14  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		14  121: 		 121: free_list 0x2aaaabb7afa0
		14  124: 		 124: new free_list 0x2aaaabb8af68
		14  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		13  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		12  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		13   27: 		  27: posting message in matcher

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		70  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		71  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		72  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		73  486: 		 486: sanitizing user input
		73  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		74  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		75  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		76  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		76  121: 		 121: free_list 0x65bce0
		76  124: 		 124: new free_list 0
		76  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		77  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		78  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		79  507: 		 507: checking mpi stages error state
		79  514: 		 514: translating request
		79  518: 		 518: persistent check
		79  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		80   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		81   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		82  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		83  570: 		 570: sanitizing user input
		83  573: 		 573: checking mpi stages error state
		83  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		83  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		83  589: 		 589: checking persistent 0 and inactive 0
		83  604: 		 604: checking if request complete 0
		83  607: 		 607: will wait for completion
		83  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		14   54: 		  54: found requests and messages to match
		14   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		15   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 3, dest 0 == 0, tag 0 == 0
		15   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 2, dest 0 == 0, tag 0 == 0
		15   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 1, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		14   94: 		  94: found match, generating match object
		14   98: 		  98: header 0x65fe20 == 0x65bce0
		14  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		15  131: 		 131: progress thread, matched header 0x65fe20 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		16  170: 		 170: handling matched request <-> protocol message
		16  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		17  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x2aaaabb7afa0
		17  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		18  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x65fe20
		18  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		19   31: 		  31: request lock acquired
		19   40: 		  40: notifying waiting thread
		19   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		20  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		83  620: 		 620: finished waiting
		83  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		84  157: 		 157: sanitizing user input
		84  159: 		 159: checking mpi stages error state
		84  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		85  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		86  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		86  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		87  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		88  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		89  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		90  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		91  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		92  486: 		 486: sanitizing user input
		92  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		93  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		94  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		95  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		95  121: 		 121: free_list 0x65bce0
		95  124: 		 124: new free_list 0
		95  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		96  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		97  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		98  507: 		 507: checking mpi stages error state
		98  514: 		 514: translating request
		98  518: 		 518: persistent check
		98  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		99   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		100   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		101  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		102  570: 		 570: sanitizing user input
		102  573: 		 573: checking mpi stages error state
		102  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		102  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		102  589: 		 589: checking persistent 0 and inactive 0
		102  604: 		 604: checking if request complete 0
		102  607: 		 607: will wait for completion
		102  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		21   54: 		  54: found requests and messages to match
		21   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		22   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 3, dest 0 == 0, tag 0 == 0
		22   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 2, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		21   94: 		  94: found match, generating match object
		21   98: 		  98: header 0x65fe08 == 0x65bce0
		21  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		22  131: 		 131: progress thread, matched header 0x65fe08 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		23  170: 		 170: handling matched request <-> protocol message
		23  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		24  140: 		 140: freeing item, now at 2 items : arenas 1 pointer 0x2aaaabb6afd8
		24  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		25  140: 		 140: freeing item, now at 2 items : arenas 1 pointer 0x65fe08
		25  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		26   31: 		  31: request lock acquired
		26   40: 		  40: notifying waiting thread
		26   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		27  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		102  620: 		 620: finished waiting
		102  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		103  157: 		 157: sanitizing user input
		103  159: 		 159: checking mpi stages error state
		103  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		104  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		105  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		105  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		106  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		107  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		108  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		109  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		110  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		111  486: 		 486: sanitizing user input
		111  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		112  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		113  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		114  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		114  121: 		 121: free_list 0x65bce0
		114  124: 		 124: new free_list 0
		114  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		115  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		116  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		117  507: 		 507: checking mpi stages error state
		117  514: 		 514: translating request
		117  518: 		 518: persistent check
		117  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		118   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		119   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		120  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		121  570: 		 570: sanitizing user input
		121  573: 		 573: checking mpi stages error state
		121  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		121  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		121  589: 		 589: checking persistent 0 and inactive 0
		121  604: 		 604: checking if request complete 0
		121  607: 		 607: will wait for completion
		121  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		28   54: 		  54: found requests and messages to match
		28   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		29   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 3 == 3, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		28   94: 		  94: found match, generating match object
		28   98: 		  98: header 0x65fdf0 == 0x65bce0
		28  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		29  131: 		 131: progress thread, matched header 0x65fdf0 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		30  170: 		 170: handling matched request <-> protocol message
		30  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		31  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		31  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		32  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65fdf0
		32  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		33   31: 		  31: request lock acquired
		33   40: 		  40: notifying waiting thread
		33   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		34  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		121  620: 		 620: finished waiting
		121  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		122  157: 		 157: sanitizing user input
		122  159: 		 159: checking mpi stages error state
		122  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		123  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		124  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		124  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		125  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		126  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		127  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		128  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		129  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		130  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		131  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		132  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		133  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		133  121: 		 121: free_list 0x65bce0
		133  124: 		 124: new free_list 0
		133  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		134  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		135  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		136  507: 		 507: checking mpi stages error state
		136  514: 		 514: translating request
		136  518: 		 518: persistent check
		136  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		137  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		138  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		139  570: 		 570: sanitizing user input
		139  573: 		 573: checking mpi stages error state
		139  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		139  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		139  589: 		 589: checking persistent 0 and inactive 0
		139  604: 		 604: checking if request complete 0

[thread undef] [src/engines/blockingprogress.cc]
	[void exampi::BlockingProgress::progress()]
		35  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		36  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		37  235: 		 235: envelope to send:  e 0 c 0 s 0 d 1 t 0

[thread  main]  [src/interfaces/interface.cc]
		139  607: 		 607: will wait for completion
		139  612: 		 612: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
		37  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		38   31: 		  31: request lock acquired
		38   40: 		  40: notifying waiting thread
		38   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		39  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		139  620: 		 620: finished waiting
		139  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		140  157: 		 157: sanitizing user input
		140  159: 		 159: checking mpi stages error state
		140  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		141  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		142  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		142  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		143  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		144  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		145  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		146  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		147  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		148  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		149  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		150  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		151  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		151  121: 		 121: free_list 0x65bce0
		151  124: 		 124: new free_list 0
		151  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		152  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		153  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		154  507: 		 507: checking mpi stages error state
		154  514: 		 514: translating request
		154  518: 		 518: persistent check
		154  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		155  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		156  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		157  570: 		 570: sanitizing user input
		157  573: 		 573: checking mpi stages error state
		157  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		157  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		157  589: 		 589: checking persistent 0 and inactive 0
		157  604: 		 604: checking if request complete 0
		157  607: 		 607: will wait for completion
		157  612: 		 612: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		40  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		41  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		41  121: 		 121: free_list 0x65fdf0
		41  124: 		 124: new free_list 0x65fe08
		41  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		40  146: 		 146: received header + size of size 28
		40  151: 		 151: header: e 0 c 0 s 2 d 0 t 0
		40  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		41  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		41  121: 		 121: free_list 0x2aaaabb5b010
		41  124: 		 124: new free_list 0x2aaaabb6afd8
		41  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		40  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		39  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		40   27: 		  27: posting message in matcher
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		41  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		42  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		42  121: 		 121: free_list 0x65fe08
		42  124: 		 124: new free_list 0x65fe20
		42  132: 		 132: item is number 2
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		41  146: 		 146: received header + size of size 28
		41  151: 		 151: header: e 0 c 0 s 3 d 0 t 0
		41  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		42  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		42  121: 		 121: free_list 0x2aaaabb6afd8
		42  124: 		 124: new free_list 0x2aaaabb7afa0
		42  132: 		 132: item is number 2
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		41  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		42  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		43   27: 		  27: posting message in matcher
	[void exampi::BlockingProgress::progress()]
		42  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		43  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		44  235: 		 235: envelope to send:  e 0 c 0 s 0 d 2 t 0
		44  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		45   31: 		  31: request lock acquired
		45   40: 		  40: notifying waiting thread
		45   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		46  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		157  620: 		 620: finished waiting
		157  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		158  157: 		 157: sanitizing user input
		158  159: 		 159: checking mpi stages error state
		158  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		159  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		160  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		160  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		161  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		162  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		163  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		164  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		165  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		166  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		167  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		168  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		169  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		169  121: 		 121: free_list 0x65bce0
		169  124: 		 124: new free_list 0
		169  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		170  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		171  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		172  507: 		 507: checking mpi stages error state
		172  514: 		 514: translating request
		172  518: 		 518: persistent check
		172  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		173  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		174  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		175  570: 		 570: sanitizing user input
		175  573: 		 573: checking mpi stages error state
		175  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		175  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		175  589: 		 589: checking persistent 0 and inactive 0
		175  604: 		 604: checking if request complete 0
		175  607: 		 607: will wait for completion
		175  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
		46  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		47  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		48  235: 		 235: envelope to send:  e 0 c 0 s 0 d 3 t 0
		48  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		49   31: 		  31: request lock acquired
		49   40: 		  40: notifying waiting thread
		49   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		50  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		175  620: 		 620: finished waiting
		175  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		176  157: 		 157: sanitizing user input
		176  159: 		 159: checking mpi stages error state
		176  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		177  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		178  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		178  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		179  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		180  563: 		 563: returning with error: 0

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		51  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		52  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		52  121: 		 121: free_list 0x65fe20
		52  124: 		 124: new free_list 0x65fe38
		52  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		51  146: 		 146: received header + size of size 28
		51  151: 		 151: header: e 0 c 0 s 1 d 0 t 0
		51  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		52  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		52  121: 		 121: free_list 0x2aaaabb7afa0
		52  124: 		 124: new free_list 0x2aaaabb8af68
		52  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		51  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		50  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		51   27: 		  27: posting message in matcher

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		181  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		182  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		183  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		184  486: 		 486: sanitizing user input
		184  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		185  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		186  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		187  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		187  121: 		 121: free_list 0x65bce0
		187  124: 		 124: new free_list 0
		187  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		188  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		189  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		190  507: 		 507: checking mpi stages error state
		190  514: 		 514: translating request
		190  518: 		 518: persistent check
		190  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		191   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		192   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		193  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		194  570: 		 570: sanitizing user input
		194  573: 		 573: checking mpi stages error state
		194  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		194  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		194  589: 		 589: checking persistent 0 and inactive 0
		194  604: 		 604: checking if request complete 0
		194  607: 		 607: will wait for completion
		194  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		52   54: 		  54: found requests and messages to match
		52   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		53   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 2, dest 0 == 0, tag 0 == 0
		53   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 3, dest 0 == 0, tag 0 == 0
		53   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 1, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		52   94: 		  94: found match, generating match object
		52   98: 		  98: header 0x65fe20 == 0x65bce0
		52  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		53  131: 		 131: progress thread, matched header 0x65fe20 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		54  170: 		 170: handling matched request <-> protocol message
		54  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		55  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x2aaaabb7afa0
		55  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		56  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x65fe20
		56  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		57   31: 		  31: request lock acquired
		57   40: 		  40: notifying waiting thread
		57   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		58  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		194  620: 		 620: finished waiting
		194  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		195  157: 		 157: sanitizing user input
		195  159: 		 159: checking mpi stages error state
		195  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		196  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		197  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		197  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		198  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		199  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		200  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		201  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		202  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		203  486: 		 486: sanitizing user input
		203  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		204  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		205  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		206  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		206  121: 		 121: free_list 0x65bce0
		206  124: 		 124: new free_list 0
		206  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		207  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		208  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		209  507: 		 507: checking mpi stages error state
		209  514: 		 514: translating request
		209  518: 		 518: persistent check
		209  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		210   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		211   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		212  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		213  570: 		 570: sanitizing user input
		213  573: 		 573: checking mpi stages error state
		213  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		213  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		213  589: 		 589: checking persistent 0 and inactive 0
		213  604: 		 604: checking if request complete 0
		213  607: 		 607: will wait for completion
		213  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		59   54: 		  54: found requests and messages to match
		59   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		60   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 2, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		59   94: 		  94: found match, generating match object
		59   98: 		  98: header 0x65fdf0 == 0x65bce0
		59  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		60  131: 		 131: progress thread, matched header 0x65fdf0 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		61  170: 		 170: handling matched request <-> protocol message
		61  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		62  140: 		 140: freeing item, now at 2 items : arenas 1 pointer 0x2aaaabb5b010
		62  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		63  140: 		 140: freeing item, now at 2 items : arenas 1 pointer 0x65fdf0
		63  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		64   31: 		  31: request lock acquired
		64   40: 		  40: notifying waiting thread
		64   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		65  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		213  620: 		 620: finished waiting
		213  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		214  157: 		 157: sanitizing user input
		214  159: 		 159: checking mpi stages error state
		214  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		215  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		216  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		216  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		217  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		218  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		219  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		220  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		221  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		222  486: 		 486: sanitizing user input
		222  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		223  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		224  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		225  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		225  121: 		 121: free_list 0x65bce0
		225  124: 		 124: new free_list 0
		225  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		226  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		227  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		228  507: 		 507: checking mpi stages error state
		228  514: 		 514: translating request
		228  518: 		 518: persistent check
		228  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		229   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		230   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		231  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		232  570: 		 570: sanitizing user input
		232  573: 		 573: checking mpi stages error state
		232  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		232  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		232  589: 		 589: checking persistent 0 and inactive 0
		232  604: 		 604: checking if request complete 0
		232  607: 		 607: will wait for completion
		232  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		66   54: 		  54: found requests and messages to match
		66   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		67   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 3 == 3, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		66   94: 		  94: found match, generating match object
		66   98: 		  98: header 0x65fe08 == 0x65bce0
		66  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		67  131: 		 131: progress thread, matched header 0x65fe08 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		68  170: 		 170: handling matched request <-> protocol message
		68  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		69  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb6afd8
		69  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		70  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65fe08
		70  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		71   31: 		  31: request lock acquired
		71   40: 		  40: notifying waiting thread
		71   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		72  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		232  620: 		 620: finished waiting
		232  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		233  157: 		 157: sanitizing user input
		233  159: 		 159: checking mpi stages error state
		233  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		234  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		235  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		235  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		236  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		237  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		238  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		239  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		240  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		241  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		242  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		243  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		244  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		244  121: 		 121: free_list 0x65bce0
		244  124: 		 124: new free_list 0
		244  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		245  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		246  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		247  507: 		 507: checking mpi stages error state
		247  514: 		 514: translating request
		247  518: 		 518: persistent check
		247  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		248  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		249  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		250  570: 		 570: sanitizing user input
		250  573: 		 573: checking mpi stages error state
		250  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		250  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		250  589: 		 589: checking persistent 0 and inactive 0
		250  604: 		 604: checking if request complete 0
		250  607: 		 607: will wait for completion
		250  612: 		 612: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		73  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		74  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		74  121: 		 121: free_list 0x65fe08
		74  124: 		 124: new free_list 0x65fdf0
		74  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		73  146: 		 146: received header + size of size 28
		73  151: 		 151: header: e 0 c 0 s 2 d 0 t 0
		73  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		74  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		74  121: 		 121: free_list 0x2aaaabb6afd8
		74  124: 		 124: new free_list 0x2aaaabb5b010
		74  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		73  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		74  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		75   27: 		  27: posting message in matcher
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		76  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		77  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		77  121: 		 121: free_list 0x65fdf0
		77  124: 		 124: new free_list 0x65fe20
		77  132: 		 132: item is number 2
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		76  146: 		 146: received header + size of size 28
		76  151: 		 151: header: e 0 c 0 s 3 d 0 t 0
		76  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		77  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		77  121: 		 121: free_list 0x2aaaabb5b010
		77  124: 		 124: new free_list 0x2aaaabb7afa0
		77  132: 		 132: item is number 2
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		76  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		77  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		78   27: 		  27: posting message in matcher
	[void exampi::BlockingProgress::progress()]
		77  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		78  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		79  235: 		 235: envelope to send:  e 0 c 0 s 0 d 1 t 0
		79  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		80   31: 		  31: request lock acquired
		80   40: 		  40: notifying waiting thread
		80   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		81  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		250  620: 		 620: finished waiting
		250  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		251  157: 		 157: sanitizing user input
		251  159: 		 159: checking mpi stages error state
		251  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		252  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		253  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		253  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		254  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		255  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		256  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		257  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		258  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		259  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		260  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		261  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		262  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		262  121: 		 121: free_list 0x65bce0
		262  124: 		 124: new free_list 0
		262  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		263  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		264  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		265  507: 		 507: checking mpi stages error state
		265  514: 		 514: translating request
		265  518: 		 518: persistent check
		265  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		266  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		267  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		268  570: 		 570: sanitizing user input
		268  573: 		 573: checking mpi stages error state
		268  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		268  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		268  589: 		 589: checking persistent 0 and inactive 0
		268  604: 		 604: checking if request complete 0
		268  607: 		 607: will wait for completion
		268  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
		81  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		82  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		83  235: 		 235: envelope to send:  e 0 c 0 s 0 d 2 t 0
		83  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		84   31: 		  31: request lock acquired
		84   40: 		  40: notifying waiting thread
		84   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		85  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		268  620: 		 620: finished waiting
		268  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		269  157: 		 157: sanitizing user input
		269  159: 		 159: checking mpi stages error state
		269  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		270  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		271  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		271  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		272  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		273  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		274  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		275  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		276  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		277  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		278  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		279  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		280  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		280  121: 		 121: free_list 0x65bce0
		280  124: 		 124: new free_list 0
		280  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		281  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		282  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		283  507: 		 507: checking mpi stages error state
		283  514: 		 514: translating request
		283  518: 		 518: persistent check
		283  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		284  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		285  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		286  570: 		 570: sanitizing user input
		286  573: 		 573: checking mpi stages error state
		286  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		286  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		286  589: 		 589: checking persistent 0 and inactive 0
		286  604: 		 604: checking if request complete 0
		286  607: 		 607: will wait for completion
		286  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
		85  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		86  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		87  235: 		 235: envelope to send:  e 0 c 0 s 0 d 3 t 0
		87  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		88   31: 		  31: request lock acquired
		88   40: 		  40: notifying waiting thread
		88   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		89  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		286  620: 		 620: finished waiting
		286  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		287  157: 		 157: sanitizing user input
		287  159: 		 159: checking mpi stages error state
		287  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		288  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		289  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		289  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		290  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		291  563: 		 563: returning with error: 0

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		90  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		91  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		91  121: 		 121: free_list 0x65fe20
		91  124: 		 124: new free_list 0x65fe38
		91  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		90  146: 		 146: received header + size of size 28
		90  151: 		 151: header: e 0 c 0 s 1 d 0 t 0
		90  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		91  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		91  121: 		 121: free_list 0x2aaaabb7afa0
		91  124: 		 124: new free_list 0x2aaaabb8af68
		91  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		90  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		89  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		90   27: 		  27: posting message in matcher

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		292  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		293  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		294  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		295  486: 		 486: sanitizing user input
		295  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		296  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		297  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		298  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		298  121: 		 121: free_list 0x65bce0
		298  124: 		 124: new free_list 0
		298  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		299  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		300  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		301  507: 		 507: checking mpi stages error state
		301  514: 		 514: translating request
		301  518: 		 518: persistent check
		301  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		302   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		303   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		304  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		305  570: 		 570: sanitizing user input
		305  573: 		 573: checking mpi stages error state
		305  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		305  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		305  589: 		 589: checking persistent 0 and inactive 0
		305  604: 		 604: checking if request complete 0
		305  607: 		 607: will wait for completion
		305  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		91   54: 		  54: found requests and messages to match
		91   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		92   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 2, dest 0 == 0, tag 0 == 0
		92   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 3, dest 0 == 0, tag 0 == 0
		92   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 1, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		91   94: 		  94: found match, generating match object
		91   98: 		  98: header 0x65fe20 == 0x65bce0
		91  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		92  131: 		 131: progress thread, matched header 0x65fe20 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		93  170: 		 170: handling matched request <-> protocol message
		93  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		94  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x2aaaabb7afa0
		94  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		95  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x65fe20
		95  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		96   31: 		  31: request lock acquired
		96   40: 		  40: notifying waiting thread
		96   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		97  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		305  620: 		 620: finished waiting
		305  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		306  157: 		 157: sanitizing user input
		306  159: 		 159: checking mpi stages error state
		306  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		307  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		308  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		308  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		309  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		310  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		311  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		312  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		313  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		314  486: 		 486: sanitizing user input
		314  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		315  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		316  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		317  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		317  121: 		 121: free_list 0x65bce0
		317  124: 		 124: new free_list 0
		317  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		318  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		319  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		320  507: 		 507: checking mpi stages error state
		320  514: 		 514: translating request
		320  518: 		 518: persistent check
		320  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		321   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		322   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		323  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		324  570: 		 570: sanitizing user input
		324  573: 		 573: checking mpi stages error state
		324  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		324  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		324  589: 		 589: checking persistent 0 and inactive 0
		324  604: 		 604: checking if request complete 0
		324  607: 		 607: will wait for completion
		324  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		98   54: 		  54: found requests and messages to match
		98   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		99   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 2, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		98   94: 		  94: found match, generating match object
		98   98: 		  98: header 0x65fe08 == 0x65bce0
		98  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		99  131: 		 131: progress thread, matched header 0x65fe08 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		100  170: 		 170: handling matched request <-> protocol message
		100  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		101  140: 		 140: freeing item, now at 2 items : arenas 1 pointer 0x2aaaabb6afd8
		101  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		102  140: 		 140: freeing item, now at 2 items : arenas 1 pointer 0x65fe08
		102  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		103   31: 		  31: request lock acquired
		103   40: 		  40: notifying waiting thread
		103   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		104  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		324  620: 		 620: finished waiting
		324  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		325  157: 		 157: sanitizing user input
		325  159: 		 159: checking mpi stages error state
		325  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		326  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		327  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		327  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		328  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		329  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		330  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		331  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		332  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		333  486: 		 486: sanitizing user input
		333  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		334  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		335  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		336  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		336  121: 		 121: free_list 0x65bce0

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		105  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		106  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		106  121: 		 121: free_list 0x65fe08
		106  124: 		 124: new free_list 0x65fe20
		106  132: 		 132: item is number 2
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		105  146: 		 146: received header + size of size 28
		105  151: 		 151: header: e 0 c 0 s 2 d 0 t 0
		105  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		106  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		106  121: 		 121: free_list 0x2aaaabb6afd8
		106  124: 		 124: new free_list 0x2aaaabb7afa0
		106  132: 		 132: item is number 2
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		105  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		106  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		107   27: 		  27: posting message in matcher

[thread  main]  [include/pool.h]
		336  124: 		 124: new free_list 0
		336  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		337  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		338  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		339  507: 		 507: checking mpi stages error state
		339  514: 		 514: translating request
		339  518: 		 518: persistent check
		339  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		340   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		341   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		342  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		343  570: 		 570: sanitizing user input
		343  573: 		 573: checking mpi stages error state
		343  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		343  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		343  589: 		 589: checking persistent 0 and inactive 0
		343  604: 		 604: checking if request complete 0
		343  607: 		 607: will wait for completion
		343  612: 		 612: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		108  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		109  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		109  121: 		 121: free_list 0x65fe20
		109  124: 		 124: new free_list 0x65fe38
		109  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		108  146: 		 146: received header + size of size 28
		108  151: 		 151: header: e 0 c 0 s 3 d 0 t 0
		108  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		109  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		109  121: 		 121: free_list 0x2aaaabb7afa0
		109  124: 		 124: new free_list 0x2aaaabb8af68
		109  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		108  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		109  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		110   27: 		  27: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		111   54: 		  54: found requests and messages to match
		111   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		112   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 3 == 3, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		111   94: 		  94: found match, generating match object
		111   98: 		  98: header 0x65fdf0 == 0x65bce0
		111  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		112  131: 		 131: progress thread, matched header 0x65fdf0 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		113  170: 		 170: handling matched request <-> protocol message
		113  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		114  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x2aaaabb5b010
		114  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		115  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x65fdf0
		115  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		116   31: 		  31: request lock acquired
		116   40: 		  40: notifying waiting thread
		116   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		117  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		343  620: 		 620: finished waiting
		343  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		344  157: 		 157: sanitizing user input
		344  159: 		 159: checking mpi stages error state
		344  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		345  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		346  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		346  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		347  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		348  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		349  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		350  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		351  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		352  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		353  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		354  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		355  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		355  121: 		 121: free_list 0x65bce0
		355  124: 		 124: new free_list 0
		355  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		356  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		357  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		358  507: 		 507: checking mpi stages error state
		358  514: 		 514: translating request
		358  518: 		 518: persistent check
		358  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		359  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		360  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		361  570: 		 570: sanitizing user input
		361  573: 		 573: checking mpi stages error state
		361  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		361  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		361  589: 		 589: checking persistent 0 and inactive 0
		361  604: 		 604: checking if request complete 0
		361  607: 		 607: will wait for completion
		361  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
	[void exampi::BlockingProgress::progress()]
		118  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		119  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		120  235: 		 235: envelope to send:  e 0 c 0 s 0 d 1 t 0
		120  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		121   31: 		  31: request lock acquired
		121   40: 		  40: notifying waiting thread
		121   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		122  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		361  620: 		 620: finished waiting
		361  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		362  157: 		 157: sanitizing user input
		362  159: 		 159: checking mpi stages error state
		362  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		363  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		364  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		364  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		365  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		366  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		367  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		368  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		369  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		370  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		371  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		372  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		373  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		373  121: 		 121: free_list 0x65bce0
		373  124: 		 124: new free_list 0
		373  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		374  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		375  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		376  507: 		 507: checking mpi stages error state
		376  514: 		 514: translating request
		376  518: 		 518: persistent check
		376  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		377  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		378  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		379  570: 		 570: sanitizing user input
		379  573: 		 573: checking mpi stages error state
		379  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		379  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		379  589: 		 589: checking persistent 0 and inactive 0
		379  604: 		 604: checking if request complete 0
		379  607: 		 607: will wait for completion
		379  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
		122  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		123  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		124  235: 		 235: envelope to send:  e 0 c 0 s 0 d 2 t 0
		124  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		125   31: 		  31: request lock acquired
		125   40: 		  40: notifying waiting thread
		125   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		126  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		379  620: 		 620: finished waiting
		379  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		380  157: 		 157: sanitizing user input
		380  159: 		 159: checking mpi stages error state
		380  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		381  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		382  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		382  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		383  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		384  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		385  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		386  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		387  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		388  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		389  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		390  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		391  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		391  121: 		 121: free_list 0x65bce0
		391  124: 		 124: new free_list 0
		391  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		392  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		393  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		394  507: 		 507: checking mpi stages error state
		394  514: 		 514: translating request
		394  518: 		 518: persistent check
		394  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		395  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		396  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		397  570: 		 570: sanitizing user input
		397  573: 		 573: checking mpi stages error state
		397  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		397  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		397  589: 		 589: checking persistent 0 and inactive 0
		397  604: 		 604: checking if request complete 0
		397  607: 		 607: will wait for completion
		397  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
		126  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		127  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		128  235: 		 235: envelope to send:  e 0 c 0 s 0 d 3 t 0
		128  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		129   31: 		  31: request lock acquired
		129   40: 		  40: notifying waiting thread
		129   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		130  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		397  620: 		 620: finished waiting
		397  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		398  157: 		 157: sanitizing user input
		398  159: 		 159: checking mpi stages error state
		398  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		399  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		400  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		400  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		401  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		402  563: 		 563: returning with error: 0

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		131  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		132  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		132  121: 		 121: free_list 0x65fdf0
		132  124: 		 124: new free_list 0x65fe38
		132  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		131  146: 		 146: received header + size of size 28
		131  151: 		 151: header: e 0 c 0 s 1 d 0 t 0
		131  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		132  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		132  121: 		 121: free_list 0x2aaaabb5b010
		132  124: 		 124: new free_list 0x2aaaabb8af68
		132  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		131  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		130  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		131   27: 		  27: posting message in matcher

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		403  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		404  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		405  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		406  486: 		 486: sanitizing user input
		406  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		407  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		408  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		409  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		409  121: 		 121: free_list 0x65bce0
		409  124: 		 124: new free_list 0
		409  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		410  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		411  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		412  507: 		 507: checking mpi stages error state
		412  514: 		 514: translating request
		412  518: 		 518: persistent check
		412  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		413   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		414   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		415  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		416  570: 		 570: sanitizing user input
		416  573: 		 573: checking mpi stages error state
		416  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		416  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		416  589: 		 589: checking persistent 0 and inactive 0
		416  604: 		 604: checking if request complete 0
		416  607: 		 607: will wait for completion
		416  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		132   54: 		  54: found requests and messages to match
		132   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		133   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 2, dest 0 == 0, tag 0 == 0
		133   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 3, dest 0 == 0, tag 0 == 0
		133   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 1, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		132   94: 		  94: found match, generating match object
		132   98: 		  98: header 0x65fdf0 == 0x65bce0
		132  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		133  131: 		 131: progress thread, matched header 0x65fdf0 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		134  170: 		 170: handling matched request <-> protocol message
		134  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		135  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x2aaaabb5b010
		135  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		136  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x65fdf0
		136  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		137   31: 		  31: request lock acquired
		137   40: 		  40: notifying waiting thread
		137   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		138  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		416  620: 		 620: finished waiting
		416  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		417  157: 		 157: sanitizing user input
		417  159: 		 159: checking mpi stages error state
		417  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		418  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		419  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		419  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		420  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		421  563: 		 563: returning with error: 0

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		139  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		140  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		140  121: 		 121: free_list 0x65fdf0
		140  124: 		 124: new free_list 0x65fe38
		140  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		139  146: 		 146: received header + size of size 28
		139  151: 		 151: header: e 0 c 0 s 2 d 0 t 0
		139  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		140  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		140  121: 		 121: free_list 0x2aaaabb5b010
		140  124: 		 124: new free_list 0x2aaaabb8af68

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		422  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		423  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		424  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		425  486: 		 486: sanitizing user input
		425  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		426  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		427  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		428  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		428  121: 		 121: free_list 0x65bce0
		428  124: 		 124: new free_list 0
		428  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		429  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		430  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		431  507: 		 507: checking mpi stages error state
		431  514: 		 514: translating request
		431  518: 		 518: persistent check
		431  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		432   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		433   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		434  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		435  570: 		 570: sanitizing user input
		435  573: 		 573: checking mpi stages error state
		435  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		435  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		435  589: 		 589: checking persistent 0 and inactive 0
		435  604: 		 604: checking if request complete 0
		435  607: 		 607: will wait for completion
		435  612: 		 612: acquired lock on request

[thread undef] [include/pool.h]
		140  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		139  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		140  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		141   27: 		  27: posting message in matcher
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		142  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		143  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		143  121: 		 121: free_list 0x65fe38
		143  124: 		 124: new free_list 0x65fe50
		143  132: 		 132: item is number 4
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		142  146: 		 146: received header + size of size 28
		142  151: 		 151: header: e 0 c 0 s 3 d 0 t 0
		142  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		143  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		143  121: 		 121: free_list 0x2aaaabb8af68
		143  124: 		 124: new free_list 0x2aaaabb9af30
		143  132: 		 132: item is number 4
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		142  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		143  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		144   27: 		  27: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		145   54: 		  54: found requests and messages to match
		145   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		146   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 2, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		145   94: 		  94: found match, generating match object
		145   98: 		  98: header 0x65fe08 == 0x65bce0
		145  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		146  131: 		 131: progress thread, matched header 0x65fe08 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		147  170: 		 170: handling matched request <-> protocol message
		147  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		148  140: 		 140: freeing item, now at 4 items : arenas 1 pointer 0x2aaaabb6afd8
		148  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		149  140: 		 140: freeing item, now at 4 items : arenas 1 pointer 0x65fe08
		149  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		150   31: 		  31: request lock acquired
		150   40: 		  40: notifying waiting thread
		150   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		151  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		435  620: 		 620: finished waiting
		435  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		436  157: 		 157: sanitizing user input
		436  159: 		 159: checking mpi stages error state
		436  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		437  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		438  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		438  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		439  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		440  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		441  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		442  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		443  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		444  486: 		 486: sanitizing user input
		444  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		445  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		446  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		447  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		447  121: 		 121: free_list 0x65bce0
		447  124: 		 124: new free_list 0
		447  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		448  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		449  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		450  507: 		 507: checking mpi stages error state
		450  514: 		 514: translating request
		450  518: 		 518: persistent check
		450  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		451   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		452   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		453  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		454  570: 		 570: sanitizing user input
		454  573: 		 573: checking mpi stages error state
		454  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		454  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		454  589: 		 589: checking persistent 0 and inactive 0
		454  604: 		 604: checking if request complete 0
		454  607: 		 607: will wait for completion
		454  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		152   54: 		  54: found requests and messages to match
		152   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		153   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 3 == 3, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		152   94: 		  94: found match, generating match object
		152   98: 		  98: header 0x65fe20 == 0x65bce0
		152  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		153  131: 		 131: progress thread, matched header 0x65fe20 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		154  170: 		 170: handling matched request <-> protocol message
		154  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		155  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x2aaaabb7afa0
		155  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		156  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x65fe20
		156  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		157   31: 		  31: request lock acquired
		157   40: 		  40: notifying waiting thread
		157   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		158  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		454  620: 		 620: finished waiting
		454  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		455  157: 		 157: sanitizing user input
		455  159: 		 159: checking mpi stages error state
		455  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		456  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		457  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		457  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		458  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		459  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		460  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		461  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		462  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		463  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		464  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		465  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		466  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		466  121: 		 121: free_list 0x65bce0
		466  124: 		 124: new free_list 0
		466  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		467  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		468  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		469  507: 		 507: checking mpi stages error state
		469  514: 		 514: translating request
		469  518: 		 518: persistent check
		469  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		470  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		471  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		472  570: 		 570: sanitizing user input
		472  573: 		 573: checking mpi stages error state
		472  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		472  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		472  589: 		 589: checking persistent 0 and inactive 0
		472  604: 		 604: checking if request complete 0
		472  607: 		 607: will wait for completion
		472  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
	[void exampi::BlockingProgress::progress()]
		159  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		160  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		161  235: 		 235: envelope to send:  e 0 c 0 s 0 d 1 t 0
		161  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		162   31: 		  31: request lock acquired
		162   40: 		  40: notifying waiting thread
		162   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		163  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		472  620: 		 620: finished waiting
		472  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		473  157: 		 157: sanitizing user input
		473  159: 		 159: checking mpi stages error state
		473  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		474  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		475  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		475  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		476  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		477  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		478  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		479  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		480  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		481  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		482  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		483  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		484  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		484  121: 		 121: free_list 0x65bce0
		484  124: 		 124: new free_list 0
		484  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		485  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		486  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		487  507: 		 507: checking mpi stages error state
		487  514: 		 514: translating request
		487  518: 		 518: persistent check
		487  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		488  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		489  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		490  570: 		 570: sanitizing user input
		490  573: 		 573: checking mpi stages error state
		490  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		490  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		490  589: 		 589: checking persistent 0 and inactive 0
		490  604: 		 604: checking if request complete 0
		490  607: 		 607: will wait for completion
		490  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
		163  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		164  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		165  235: 		 235: envelope to send:  e 0 c 0 s 0 d 2 t 0
		165  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		166   31: 		  31: request lock acquired
		166   40: 		  40: notifying waiting thread
		166   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		167  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		490  620: 		 620: finished waiting
		490  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		491  157: 		 157: sanitizing user input
		491  159: 		 159: checking mpi stages error state
		491  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		492  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		493  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		493  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		494  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		495  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		496  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		497  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		498  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		499  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		500  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		501  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		502  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		502  121: 		 121: free_list 0x65bce0
		502  124: 		 124: new free_list 0
		502  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		503  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		504  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		505  507: 		 507: checking mpi stages error state
		505  514: 		 514: translating request
		505  518: 		 518: persistent check
		505  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		506  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		507  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		508  570: 		 570: sanitizing user input
		508  573: 		 573: checking mpi stages error state
		508  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		508  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		508  589: 		 589: checking persistent 0 and inactive 0
		508  604: 		 604: checking if request complete 0
		508  607: 		 607: will wait for completion
		508  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
		167  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		168  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		169  235: 		 235: envelope to send:  e 0 c 0 s 0 d 3 t 0
		169  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		170   31: 		  31: request lock acquired
		170   40: 		  40: notifying waiting thread
		170   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		171  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		508  620: 		 620: finished waiting
		508  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		509  157: 		 157: sanitizing user input
		509  159: 		 159: checking mpi stages error state
		509  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		510  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		511  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		511  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		512  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		513  563: 		 563: returning with error: 0

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		172  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		173  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		173  121: 		 121: free_list 0x65fe20
		173  124: 		 124: new free_list 0x65fe08
		173  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		172  146: 		 146: received header + size of size 28
		172  151: 		 151: header: e 0 c 0 s 1 d 0 t 0
		172  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		173  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		173  121: 		 121: free_list 0x2aaaabb7afa0
		173  124: 		 124: new free_list 0x2aaaabb6afd8
		173  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		172  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		171  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		172   27: 		  27: posting message in matcher
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		173  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		174  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		174  121: 		 121: free_list 0x65fe08
		174  124: 		 124: new free_list 0x65fe50
		174  132: 		 132: item is number 4
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		173  146: 		 146: received header + size of size 28
		173  151: 		 151: header: e 0 c 0 s 2 d 0 t 0
		173  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		174  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		174  121: 		 121: free_list 0x2aaaabb6afd8
		174  124: 		 124: new free_list 0x2aaaabb9af30
		174  132: 		 132: item is number 4
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		173  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		174  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		175   27: 		  27: posting message in matcher

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		514  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		515  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		516  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		517  486: 		 486: sanitizing user input
		517  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		518  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		519  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		520  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		520  121: 		 121: free_list 0x65bce0
		520  124: 		 124: new free_list 0
		520  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		521  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		522  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		523  507: 		 507: checking mpi stages error state
		523  514: 		 514: translating request
		523  518: 		 518: persistent check
		523  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		524   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		525   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		526  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		527  570: 		 570: sanitizing user input
		527  573: 		 573: checking mpi stages error state
		527  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		527  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		527  589: 		 589: checking persistent 0 and inactive 0
		527  604: 		 604: checking if request complete 0
		527  607: 		 607: will wait for completion
		527  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		176   54: 		  54: found requests and messages to match
		176   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		177   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 2, dest 0 == 0, tag 0 == 0
		177   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 3, dest 0 == 0, tag 0 == 0
		177   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 1, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		176   94: 		  94: found match, generating match object
		176   98: 		  98: header 0x65fe20 == 0x65bce0
		176  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		177  131: 		 131: progress thread, matched header 0x65fe20 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		178  170: 		 170: handling matched request <-> protocol message
		178  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		179  140: 		 140: freeing item, now at 4 items : arenas 1 pointer 0x2aaaabb7afa0
		179  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		180  140: 		 140: freeing item, now at 4 items : arenas 1 pointer 0x65fe20
		180  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		181   31: 		  31: request lock acquired
		181   40: 		  40: notifying waiting thread
		181   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		182  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		527  620: 		 620: finished waiting
		527  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		528  157: 		 157: sanitizing user input
		528  159: 		 159: checking mpi stages error state
		528  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		529  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		530  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		530  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		531  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		532  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		533  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		534  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		535  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		536  486: 		 486: sanitizing user input
		536  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		537  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		538  107: 		 107: allocating request from memory pool

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		183  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		184  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		184  121: 		 121: free_list 0x65fe20
		184  124: 		 124: new free_list 0x65fe50
		184  132: 		 132: item is number 4
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		183  146: 		 146: received header + size of size 28
		183  151: 		 151: header: e 0 c 0 s 3 d 0 t 0
		183  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		184  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		184  121: 		 121: free_list 0x2aaaabb7afa0
		184  124: 		 124: new free_list 0x2aaaabb9af30

[thread  main]  [include/pool.h]
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		539  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		539  121: 		 121: free_list 0x65bce0
		539  124: 		 124: new free_list 0
		539  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		540  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		541  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		542  507: 		 507: checking mpi stages error state
		542  514: 		 514: translating request
		542  518: 		 518: persistent check
		542  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		543   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		544   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		545  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		546  570: 		 570: sanitizing user input
		546  573: 		 573: checking mpi stages error state
		546  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		546  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		546  589: 		 589: checking persistent 0 and inactive 0
		546  604: 		 604: checking if request complete 0
		546  607: 		 607: will wait for completion
		546  612: 		 612: acquired lock on request

[thread undef] [include/pool.h]
		184  132: 		 132: item is number 4
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		183  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		184  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		185   27: 		  27: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		186   54: 		  54: found requests and messages to match
		186   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		187   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 2, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		186   94: 		  94: found match, generating match object
		186   98: 		  98: header 0x65fdf0 == 0x65bce0
		186  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		187  131: 		 131: progress thread, matched header 0x65fdf0 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		188  170: 		 170: handling matched request <-> protocol message
		188  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		189  140: 		 140: freeing item, now at 4 items : arenas 1 pointer 0x2aaaabb5b010
		189  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		190  140: 		 140: freeing item, now at 4 items : arenas 1 pointer 0x65fdf0
		190  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		191   31: 		  31: request lock acquired
		191   40: 		  40: notifying waiting thread
		191   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		192  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		546  620: 		 620: finished waiting
		546  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		547  157: 		 157: sanitizing user input
		547  159: 		 159: checking mpi stages error state
		547  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		548  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		549  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		549  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		550  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		551  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		552  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		553  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		554  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		555  486: 		 486: sanitizing user input
		555  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		556  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		557  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		558  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		558  121: 		 121: free_list 0x65bce0
		558  124: 		 124: new free_list 0
		558  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		559  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		560  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		561  507: 		 507: checking mpi stages error state
		561  514: 		 514: translating request
		561  518: 		 518: persistent check
		561  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		562   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		563   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		564  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		565  570: 		 570: sanitizing user input
		565  573: 		 573: checking mpi stages error state
		565  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		565  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		565  589: 		 589: checking persistent 0 and inactive 0
		565  604: 		 604: checking if request complete 0
		565  607: 		 607: will wait for completion
		565  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		193   54: 		  54: found requests and messages to match
		193   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		194   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 3 == 3, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		193   94: 		  94: found match, generating match object
		193   98: 		  98: header 0x65fe38 == 0x65bce0
		193  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		194  131: 		 131: progress thread, matched header 0x65fe38 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		195  170: 		 170: handling matched request <-> protocol message
		195  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		196  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x2aaaabb8af68
		196  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		197  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x65fe38
		197  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		198   31: 		  31: request lock acquired
		198   40: 		  40: notifying waiting thread
		198   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		199  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		565  620: 		 620: finished waiting
		565  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		566  157: 		 157: sanitizing user input
		566  159: 		 159: checking mpi stages error state
		566  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		567  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		568  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		568  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		569  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		570  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		571  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		572  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		573  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		574  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		575  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		576  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		577  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		577  121: 		 121: free_list 0x65bce0
		577  124: 		 124: new free_list 0
		577  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		578  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		579  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		580  507: 		 507: checking mpi stages error state
		580  514: 		 514: translating request
		580  518: 		 518: persistent check
		580  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		581  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		582  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		583  570: 		 570: sanitizing user input
		583  573: 		 573: checking mpi stages error state
		583  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		583  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		583  589: 		 589: checking persistent 0 and inactive 0
		583  604: 		 604: checking if request complete 0
		583  607: 		 607: will wait for completion
		583  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
	[void exampi::BlockingProgress::progress()]
		200  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		201  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		202  235: 		 235: envelope to send:  e 0 c 0 s 0 d 1 t 0
		202  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		203   31: 		  31: request lock acquired
		203   40: 		  40: notifying waiting thread
		203   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		204  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		583  620: 		 620: finished waiting
		583  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		584  157: 		 157: sanitizing user input
		584  159: 		 159: checking mpi stages error state
		584  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		585  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		586  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		586  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		587  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		588  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		589  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		590  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		591  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		592  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		593  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		594  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		595  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		595  121: 		 121: free_list 0x65bce0
		595  124: 		 124: new free_list 0
		595  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		596  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		597  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		598  507: 		 507: checking mpi stages error state
		598  514: 		 514: translating request
		598  518: 		 518: persistent check
		598  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		599  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		600  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		601  570: 		 570: sanitizing user input
		601  573: 		 573: checking mpi stages error state
		601  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		601  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		601  589: 		 589: checking persistent 0 and inactive 0
		601  604: 		 604: checking if request complete 0
		601  607: 		 607: will wait for completion
		601  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
		204  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		205  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		206  235: 		 235: envelope to send:  e 0 c 0 s 0 d 2 t 0
		206  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		207   31: 		  31: request lock acquired
		207   40: 		  40: notifying waiting thread
		207   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		208  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		601  620: 		 620: finished waiting
		601  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		602  157: 		 157: sanitizing user input
		602  159: 		 159: checking mpi stages error state
		602  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		603  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		604  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		604  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		605  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		606  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		607  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		608  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		609  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		610  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		611  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		612  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		613  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		613  121: 		 121: free_list 0x65bce0
		613  124: 		 124: new free_list 0
		613  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		614  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		615  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		616  507: 		 507: checking mpi stages error state
		616  514: 		 514: translating request
		616  518: 		 518: persistent check
		616  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		617  105: 		 105: put *send request into outbox

[thread undef] [src/engines/blockingprogress.cc]
		208  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		209  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		210  235: 		 235: envelope to send:  e 0 c 0 s 0 d 3 t 0

[thread  main]  [src/interfaces/interface.cc]
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		618  262: 		 262: waiting for request

[thread undef] [src/transports/udptransport.cc]
		210  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		211   31: 		  31: request lock acquired
		211   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		212  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		619  570: 		 570: sanitizing user input
		619  573: 		 573: checking mpi stages error state
		619  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		619  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		619  589: 		 589: checking persistent 0 and inactive 0
		619  604: 		 604: checking if request complete 1
		619  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		620  157: 		 157: sanitizing user input
		620  159: 		 159: checking mpi stages error state
		620  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		621  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		622  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		622  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		623  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		624  563: 		 563: returning with error: 0

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		213  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		214  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		214  121: 		 121: free_list 0x65fe38
		214  124: 		 124: new free_list 0x65fdf0
		214  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		213  146: 		 146: received header + size of size 28
		213  151: 		 151: header: e 0 c 0 s 1 d 0 t 0
		213  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		214  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		214  121: 		 121: free_list 0x2aaaabb8af68
		214  124: 		 124: new free_list 0x2aaaabb5b010
		214  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		213  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		212  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		213   27: 		  27: posting message in matcher

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		625  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		626  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		627  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		628  486: 		 486: sanitizing user input
		628  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		629  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		630  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		631  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		631  121: 		 121: free_list 0x65bce0
		631  124: 		 124: new free_list 0
		631  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		632  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		633  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		634  507: 		 507: checking mpi stages error state
		634  514: 		 514: translating request
		634  518: 		 518: persistent check
		634  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		635   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		636   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		637  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		638  570: 		 570: sanitizing user input
		638  573: 		 573: checking mpi stages error state
		638  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		638  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		638  589: 		 589: checking persistent 0 and inactive 0
		638  604: 		 604: checking if request complete 0
		638  607: 		 607: will wait for completion
		638  612: 		 612: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		214  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		215  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		215  121: 		 121: free_list 0x65fdf0
		215  124: 		 124: new free_list 0x65fe50
		215  132: 		 132: item is number 4
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		214  146: 		 146: received header + size of size 28
		214  151: 		 151: header: e 0 c 0 s 2 d 0 t 0
		214  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		215  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		215  121: 		 121: free_list 0x2aaaabb5b010
		215  124: 		 124: new free_list 0x2aaaabb9af30
		215  132: 		 132: item is number 4
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		214  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		215  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		216   27: 		  27: posting message in matcher
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		217  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		218  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		218  121: 		 121: free_list 0x65fe50
		218  124: 		 124: new free_list 0x65fe68
		218  132: 		 132: item is number 5
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		217  146: 		 146: received header + size of size 28
		217  151: 		 151: header: e 0 c 0 s 3 d 0 t 0
		217  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		218  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		218  121: 		 121: free_list 0x2aaaabb9af30
		218  124: 		 124: new free_list 0x2aaaabbaaef8
		218  132: 		 132: item is number 5
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		217  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		218  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		219   27: 		  27: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		220   54: 		  54: found requests and messages to match
		220   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		221   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 2, dest 0 == 0, tag 0 == 0
		221   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 3, dest 0 == 0, tag 0 == 0
		221   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 1, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		220   94: 		  94: found match, generating match object
		220   98: 		  98: header 0x65fe38 == 0x65bce0
		220  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		221  131: 		 131: progress thread, matched header 0x65fe38 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		222  170: 		 170: handling matched request <-> protocol message
		222  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		223  140: 		 140: freeing item, now at 5 items : arenas 1 pointer 0x2aaaabb8af68
		223  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		224  140: 		 140: freeing item, now at 5 items : arenas 1 pointer 0x65fe38
		224  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		225   31: 		  31: request lock acquired
		225   40: 		  40: notifying waiting thread
		225   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		226  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		638  620: 		 620: finished waiting
		638  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		639  157: 		 157: sanitizing user input
		639  159: 		 159: checking mpi stages error state
		639  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		640  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		641  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		641  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		642  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		643  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		644  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		645  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		646  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		647  486: 		 486: sanitizing user input
		647  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		648  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		649  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		650  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		650  121: 		 121: free_list 0x65bce0
		650  124: 		 124: new free_list 0
		650  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		651  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		652  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		653  507: 		 507: checking mpi stages error state
		653  514: 		 514: translating request
		653  518: 		 518: persistent check
		653  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		654   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		655   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		656  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		657  570: 		 570: sanitizing user input
		657  573: 		 573: checking mpi stages error state
		657  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		657  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		657  589: 		 589: checking persistent 0 and inactive 0
		657  604: 		 604: checking if request complete 0
		657  607: 		 607: will wait for completion
		657  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		227   54: 		  54: found requests and messages to match
		227   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		228   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 2, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		227   94: 		  94: found match, generating match object
		227   98: 		  98: header 0x65fe08 == 0x65bce0
		227  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		228  131: 		 131: progress thread, matched header 0x65fe08 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		229  170: 		 170: handling matched request <-> protocol message
		229  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		230  140: 		 140: freeing item, now at 4 items : arenas 1 pointer 0x2aaaabb6afd8
		230  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		231  140: 		 140: freeing item, now at 4 items : arenas 1 pointer 0x65fe08
		231  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		232   31: 		  31: request lock acquired
		232   40: 		  40: notifying waiting thread
		232   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		233  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		657  620: 		 620: finished waiting
		657  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		658  157: 		 157: sanitizing user input
		658  159: 		 159: checking mpi stages error state
		658  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		659  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		660  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		660  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		661  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		662  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		663  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		664  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		665  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		666  486: 		 486: sanitizing user input
		666  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		667  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		668  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		669  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		669  121: 		 121: free_list 0x65bce0
		669  124: 		 124: new free_list 0
		669  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		670  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		671  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		672  507: 		 507: checking mpi stages error state
		672  514: 		 514: translating request
		672  518: 		 518: persistent check
		672  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		673   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		674   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		675  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		676  570: 		 570: sanitizing user input
		676  573: 		 573: checking mpi stages error state
		676  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		676  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		676  589: 		 589: checking persistent 0 and inactive 0
		676  604: 		 604: checking if request complete 0
		676  607: 		 607: will wait for completion
		676  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		234   54: 		  54: found requests and messages to match
		234   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		235   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 3 == 3, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		234   94: 		  94: found match, generating match object
		234   98: 		  98: header 0x65fe20 == 0x65bce0
		234  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		235  131: 		 131: progress thread, matched header 0x65fe20 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		236  170: 		 170: handling matched request <-> protocol message
		236  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		237  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x2aaaabb7afa0
		237  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		238  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x65fe20
		238  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		239   31: 		  31: request lock acquired
		239   40: 		  40: notifying waiting thread
		239   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		240  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		676  620: 		 620: finished waiting
		676  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		677  157: 		 157: sanitizing user input
		677  159: 		 159: checking mpi stages error state
		677  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		678  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		679  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		679  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		680  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		681  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		682  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		683  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		684  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		685  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		686  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		687  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		688  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		688  121: 		 121: free_list 0x65bce0
		688  124: 		 124: new free_list 0
		688  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		689  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		690  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		691  507: 		 507: checking mpi stages error state
		691  514: 		 514: translating request
		691  518: 		 518: persistent check
		691  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		692  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		693  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		694  570: 		 570: sanitizing user input
		694  573: 		 573: checking mpi stages error state
		694  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		694  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		694  589: 		 589: checking persistent 0 and inactive 0
		694  604: 		 604: checking if request complete 0
		694  607: 		 607: will wait for completion
		694  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
	[void exampi::BlockingProgress::progress()]
		241  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		242  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		243  235: 		 235: envelope to send:  e 0 c 0 s 0 d 1 t 0
		243  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		244   31: 		  31: request lock acquired
		244   40: 		  40: notifying waiting thread
		244   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		245  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		694  620: 		 620: finished waiting
		694  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		695  157: 		 157: sanitizing user input
		695  159: 		 159: checking mpi stages error state
		695  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		696  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		697  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		697  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		698  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		699  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		700  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		701  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		702  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		703  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		704  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		705  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		706  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		706  121: 		 121: free_list 0x65bce0
		706  124: 		 124: new free_list 0
		706  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		707  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		708  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		709  507: 		 507: checking mpi stages error state
		709  514: 		 514: translating request
		709  518: 		 518: persistent check
		709  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		710  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		711  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		712  570: 		 570: sanitizing user input
		712  573: 		 573: checking mpi stages error state
		712  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		712  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		712  589: 		 589: checking persistent 0 and inactive 0
		712  604: 		 604: checking if request complete 0
		712  607: 		 607: will wait for completion
		712  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
		245  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		246  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		247  235: 		 235: envelope to send:  e 0 c 0 s 0 d 2 t 0
		247  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		248   31: 		  31: request lock acquired
		248   40: 		  40: notifying waiting thread
		248   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		249  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		712  620: 		 620: finished waiting
		712  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		713  157: 		 157: sanitizing user input
		713  159: 		 159: checking mpi stages error state
		713  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		714  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		715  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		715  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		716  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		717  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		718  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		719  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		720  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		721  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		722  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		723  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		724  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		724  121: 		 121: free_list 0x65bce0
		724  124: 		 124: new free_list 0
		724  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		725  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		726  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		727  507: 		 507: checking mpi stages error state
		727  514: 		 514: translating request
		727  518: 		 518: persistent check
		727  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		728  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		729  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		730  570: 		 570: sanitizing user input
		730  573: 		 573: checking mpi stages error state
		730  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		730  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		730  589: 		 589: checking persistent 0 and inactive 0
		730  604: 		 604: checking if request complete 0
		730  607: 		 607: will wait for completion
		730  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
		249  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		250  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		251  235: 		 235: envelope to send:  e 0 c 0 s 0 d 3 t 0
		251  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		252   31: 		  31: request lock acquired
		252   40: 		  40: notifying waiting thread
		252   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		253  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		730  620: 		 620: finished waiting
		730  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		731  157: 		 157: sanitizing user input
		731  159: 		 159: checking mpi stages error state
		731  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		732  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		733  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		733  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		734  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		735  563: 		 563: returning with error: 0

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		254  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		255  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		255  121: 		 121: free_list 0x65fe20
		255  124: 		 124: new free_list 0x65fe08
		255  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		254  146: 		 146: received header + size of size 28
		254  151: 		 151: header: e 0 c 0 s 1 d 0 t 0
		254  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		255  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		255  121: 		 121: free_list 0x2aaaabb7afa0
		255  124: 		 124: new free_list 0x2aaaabb6afd8
		255  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		254  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		253  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		254   27: 		  27: posting message in matcher
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		255  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		256  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		256  121: 		 121: free_list 0x65fe08
		256  124: 		 124: new free_list 0x65fe38
		256  132: 		 132: item is number 4
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		255  146: 		 146: received header + size of size 28
		255  151: 		 151: header: e 0 c 0 s 2 d 0 t 0
		255  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		256  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		256  121: 		 121: free_list 0x2aaaabb6afd8
		256  124: 		 124: new free_list 0x2aaaabb8af68
		256  132: 		 132: item is number 4
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		255  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		256  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		257   27: 		  27: posting message in matcher
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		258  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		259  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		259  121: 		 121: free_list 0x65fe38
		259  124: 		 124: new free_list 0x65fe68
		259  132: 		 132: item is number 5
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		258  146: 		 146: received header + size of size 28
		258  151: 		 151: header: e 0 c 0 s 3 d 0 t 0
		258  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		259  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		259  121: 		 121: free_list 0x2aaaabb8af68
		259  124: 		 124: new free_list 0x2aaaabbaaef8
		259  132: 		 132: item is number 5
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		258  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		259  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		260   27: 		  27: posting message in matcher

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		736  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		737  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		738  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		739  486: 		 486: sanitizing user input
		739  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		740  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		741  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		742  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		742  121: 		 121: free_list 0x65bce0
		742  124: 		 124: new free_list 0
		742  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		743  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		744  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		745  507: 		 507: checking mpi stages error state
		745  514: 		 514: translating request
		745  518: 		 518: persistent check
		745  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		746   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		747   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		748  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		749  570: 		 570: sanitizing user input
		749  573: 		 573: checking mpi stages error state
		749  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		749  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		749  589: 		 589: checking persistent 0 and inactive 0
		749  604: 		 604: checking if request complete 0
		749  607: 		 607: will wait for completion
		749  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		261   54: 		  54: found requests and messages to match
		261   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		262   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 2, dest 0 == 0, tag 0 == 0
		262   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 3, dest 0 == 0, tag 0 == 0
		262   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 1, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		261   94: 		  94: found match, generating match object
		261   98: 		  98: header 0x65fe20 == 0x65bce0
		261  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		262  131: 		 131: progress thread, matched header 0x65fe20 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		263  170: 		 170: handling matched request <-> protocol message
		263  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		264  140: 		 140: freeing item, now at 5 items : arenas 1 pointer 0x2aaaabb7afa0
		264  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		265  140: 		 140: freeing item, now at 5 items : arenas 1 pointer 0x65fe20
		265  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		266   31: 		  31: request lock acquired
		266   40: 		  40: notifying waiting thread
		266   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		267  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		749  620: 		 620: finished waiting
		749  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		750  157: 		 157: sanitizing user input
		750  159: 		 159: checking mpi stages error state
		750  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		751  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		752  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		752  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		753  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		754  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		755  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		756  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		757  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		758  486: 		 486: sanitizing user input
		758  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		759  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		760  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		761  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		761  121: 		 121: free_list 0x65bce0
		761  124: 		 124: new free_list 0
		761  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		762  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		763  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		764  507: 		 507: checking mpi stages error state
		764  514: 		 514: translating request
		764  518: 		 518: persistent check
		764  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		765   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		766   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		767  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		768  570: 		 570: sanitizing user input
		768  573: 		 573: checking mpi stages error state
		768  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		768  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		768  589: 		 589: checking persistent 0 and inactive 0
		768  604: 		 604: checking if request complete 0
		768  607: 		 607: will wait for completion
		768  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		268   54: 		  54: found requests and messages to match
		268   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		269   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 2, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		268   94: 		  94: found match, generating match object
		268   98: 		  98: header 0x65fdf0 == 0x65bce0
		268  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		269  131: 		 131: progress thread, matched header 0x65fdf0 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		270  170: 		 170: handling matched request <-> protocol message
		270  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		271  140: 		 140: freeing item, now at 4 items : arenas 1 pointer 0x2aaaabb5b010
		271  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		272  140: 		 140: freeing item, now at 4 items : arenas 1 pointer 0x65fdf0
		272  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		273   31: 		  31: request lock acquired
		273   40: 		  40: notifying waiting thread
		273   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		274  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		768  620: 		 620: finished waiting
		768  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		769  157: 		 157: sanitizing user input
		769  159: 		 159: checking mpi stages error state
		769  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		770  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		771  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		771  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		772  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		773  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		774  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		775  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		776  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		777  486: 		 486: sanitizing user input
		777  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		778  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		779  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		780  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		780  121: 		 121: free_list 0x65bce0
		780  124: 		 124: new free_list 0
		780  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		781  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		782  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		783  507: 		 507: checking mpi stages error state
		783  514: 		 514: translating request
		783  518: 		 518: persistent check
		783  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		784   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		785   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		786  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		787  570: 		 570: sanitizing user input
		787  573: 		 573: checking mpi stages error state
		787  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		787  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		787  589: 		 589: checking persistent 0 and inactive 0
		787  604: 		 604: checking if request complete 0
		787  607: 		 607: will wait for completion
		787  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		275   54: 		  54: found requests and messages to match
		275   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		276   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 3 == 3, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		275   94: 		  94: found match, generating match object
		275   98: 		  98: header 0x65fe50 == 0x65bce0
		275  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		276  131: 		 131: progress thread, matched header 0x65fe50 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		277  170: 		 170: handling matched request <-> protocol message
		277  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		278  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x2aaaabb9af30
		278  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		279  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x65fe50
		279  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		280   31: 		  31: request lock acquired
		280   40: 		  40: notifying waiting thread
		280   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		281  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		787  620: 		 620: finished waiting
		787  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		788  157: 		 157: sanitizing user input
		788  159: 		 159: checking mpi stages error state
		788  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		789  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		790  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		790  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		791  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		792  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		793  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		794  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		795  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		796  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		797  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		798  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		799  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		799  121: 		 121: free_list 0x65bce0
		799  124: 		 124: new free_list 0
		799  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		800  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		801  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		802  507: 		 507: checking mpi stages error state
		802  514: 		 514: translating request
		802  518: 		 518: persistent check
		802  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		803  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		804  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		805  570: 		 570: sanitizing user input
		805  573: 		 573: checking mpi stages error state
		805  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		805  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		805  589: 		 589: checking persistent 0 and inactive 0
		805  604: 		 604: checking if request complete 0
		805  607: 		 607: will wait for completion
		805  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
	[void exampi::BlockingProgress::progress()]
		282  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		283  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		284  235: 		 235: envelope to send:  e 0 c 0 s 0 d 1 t 0
		284  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		285   31: 		  31: request lock acquired
		285   40: 		  40: notifying waiting thread
		285   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		286  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		805  620: 		 620: finished waiting
		805  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		806  157: 		 157: sanitizing user input
		806  159: 		 159: checking mpi stages error state
		806  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		807  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		808  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		808  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		809  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		810  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		811  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		812  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		813  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		814  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		815  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		816  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		817  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		817  121: 		 121: free_list 0x65bce0
		817  124: 		 124: new free_list 0
		817  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		818  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		819  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		820  507: 		 507: checking mpi stages error state
		820  514: 		 514: translating request
		820  518: 		 518: persistent check
		820  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		821  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		822  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		823  570: 		 570: sanitizing user input
		823  573: 		 573: checking mpi stages error state
		823  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		823  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		823  589: 		 589: checking persistent 0 and inactive 0
		823  604: 		 604: checking if request complete 0
		823  607: 		 607: will wait for completion
		823  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
		286  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		287  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		288  235: 		 235: envelope to send:  e 0 c 0 s 0 d 2 t 0
		288  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		289   31: 		  31: request lock acquired
		289   40: 		  40: notifying waiting thread
		289   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		290  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		823  620: 		 620: finished waiting
		823  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		824  157: 		 157: sanitizing user input
		824  159: 		 159: checking mpi stages error state
		824  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		825  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		826  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		826  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		827  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		828  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		829  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		830  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		831  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		832  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		833  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		834  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		835  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		835  121: 		 121: free_list 0x65bce0
		835  124: 		 124: new free_list 0
		835  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		836  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		837  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		838  507: 		 507: checking mpi stages error state
		838  514: 		 514: translating request
		838  518: 		 518: persistent check
		838  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		839  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		840  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		841  570: 		 570: sanitizing user input
		841  573: 		 573: checking mpi stages error state
		841  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		841  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		841  589: 		 589: checking persistent 0 and inactive 0
		841  604: 		 604: checking if request complete 0
		841  607: 		 607: will wait for completion
		841  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
		290  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		291  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		292  235: 		 235: envelope to send:  e 0 c 0 s 0 d 3 t 0
		292  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		293   31: 		  31: request lock acquired
		293   40: 		  40: notifying waiting thread
		293   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		294  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		841  620: 		 620: finished waiting
		841  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		842  157: 		 157: sanitizing user input
		842  159: 		 159: checking mpi stages error state
		842  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		843  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		844  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		844  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		845  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		846  563: 		 563: returning with error: 0

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		295  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		296  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		296  121: 		 121: free_list 0x65fe50
		296  124: 		 124: new free_list 0x65fdf0
		296  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		295  146: 		 146: received header + size of size 28
		295  151: 		 151: header: e 0 c 0 s 1 d 0 t 0
		295  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		296  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		296  121: 		 121: free_list 0x2aaaabb9af30
		296  124: 		 124: new free_list 0x2aaaabb5b010
		296  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		295  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		294  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		295   27: 		  27: posting message in matcher
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		296  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		297  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		297  121: 		 121: free_list 0x65fdf0
		297  124: 		 124: new free_list 0x65fe20
		297  132: 		 132: item is number 4

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		847  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		848  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		849  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		850  486: 		 486: sanitizing user input
		850  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		851  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		852  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		853  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		853  121: 		 121: free_list 0x65bce0
		853  124: 		 124: new free_list 0
		853  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		854  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		855  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		856  507: 		 507: checking mpi stages error state
		856  514: 		 514: translating request
		856  518: 		 518: persistent check
		856  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		857   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		858   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		859  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		860  570: 		 570: sanitizing user input
		860  573: 		 573: checking mpi stages error state
		860  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		860  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		860  589: 		 589: checking persistent 0 and inactive 0
		860  604: 		 604: checking if request complete 0
		860  607: 		 607: will wait for completion
		860  612: 		 612: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		296  146: 		 146: received header + size of size 28
		296  151: 		 151: header: e 0 c 0 s 2 d 0 t 0
		296  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		297  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		297  121: 		 121: free_list 0x2aaaabb5b010
		297  124: 		 124: new free_list 0x2aaaabb7afa0
		297  132: 		 132: item is number 4
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		296  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		297  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		298   27: 		  27: posting message in matcher
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		299  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		300  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		300  121: 		 121: free_list 0x65fe20
		300  124: 		 124: new free_list 0x65fe68
		300  132: 		 132: item is number 5
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		299  146: 		 146: received header + size of size 28
		299  151: 		 151: header: e 0 c 0 s 3 d 0 t 0
		299  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		300  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		300  121: 		 121: free_list 0x2aaaabb7afa0
		300  124: 		 124: new free_list 0x2aaaabbaaef8
		300  132: 		 132: item is number 5
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		299  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		300  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		301   27: 		  27: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		302   54: 		  54: found requests and messages to match
		302   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		303   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 2, dest 0 == 0, tag 0 == 0
		303   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 3, dest 0 == 0, tag 0 == 0
		303   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 1, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		302   94: 		  94: found match, generating match object
		302   98: 		  98: header 0x65fe50 == 0x65bce0
		302  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		303  131: 		 131: progress thread, matched header 0x65fe50 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		304  170: 		 170: handling matched request <-> protocol message
		304  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		305  140: 		 140: freeing item, now at 5 items : arenas 1 pointer 0x2aaaabb9af30
		305  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		306  140: 		 140: freeing item, now at 5 items : arenas 1 pointer 0x65fe50
		306  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		307   31: 		  31: request lock acquired
		307   40: 		  40: notifying waiting thread
		307   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		308  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		860  620: 		 620: finished waiting
		860  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		861  157: 		 157: sanitizing user input
		861  159: 		 159: checking mpi stages error state
		861  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		862  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		863  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		863  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		864  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		865  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		866  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		867  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		868  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		869  486: 		 486: sanitizing user input
		869  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		870  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		871  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		872  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		872  121: 		 121: free_list 0x65bce0
		872  124: 		 124: new free_list 0
		872  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		873  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		874  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		875  507: 		 507: checking mpi stages error state
		875  514: 		 514: translating request
		875  518: 		 518: persistent check
		875  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		876   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		877   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		878  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		879  570: 		 570: sanitizing user input
		879  573: 		 573: checking mpi stages error state
		879  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		879  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		879  589: 		 589: checking persistent 0 and inactive 0
		879  604: 		 604: checking if request complete 0
		879  607: 		 607: will wait for completion
		879  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		309   54: 		  54: found requests and messages to match
		309   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		310   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 2, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		309   94: 		  94: found match, generating match object
		309   98: 		  98: header 0x65fe08 == 0x65bce0
		309  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		310  131: 		 131: progress thread, matched header 0x65fe08 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		311  170: 		 170: handling matched request <-> protocol message
		311  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		312  140: 		 140: freeing item, now at 4 items : arenas 1 pointer 0x2aaaabb6afd8
		312  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		313  140: 		 140: freeing item, now at 4 items : arenas 1 pointer 0x65fe08
		313  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		314   31: 		  31: request lock acquired
		314   40: 		  40: notifying waiting thread
		314   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		315  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		879  620: 		 620: finished waiting
		879  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		880  157: 		 157: sanitizing user input
		880  159: 		 159: checking mpi stages error state
		880  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		881  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		882  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		882  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		883  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		884  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		885  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		886  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		887  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		888  486: 		 486: sanitizing user input
		888  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		889  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		890  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		891  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		891  121: 		 121: free_list 0x65bce0
		891  124: 		 124: new free_list 0
		891  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		892  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		893  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		894  507: 		 507: checking mpi stages error state
		894  514: 		 514: translating request
		894  518: 		 518: persistent check
		894  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		895   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		896   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		897  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		898  570: 		 570: sanitizing user input
		898  573: 		 573: checking mpi stages error state
		898  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		898  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		898  589: 		 589: checking persistent 0 and inactive 0
		898  604: 		 604: checking if request complete 0
		898  607: 		 607: will wait for completion
		898  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		316   54: 		  54: found requests and messages to match
		316   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		317   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 3 == 3, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		316   94: 		  94: found match, generating match object
		316   98: 		  98: header 0x65fe38 == 0x65bce0
		316  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		317  131: 		 131: progress thread, matched header 0x65fe38 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		318  170: 		 170: handling matched request <-> protocol message
		318  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		319  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x2aaaabb8af68
		319  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		320  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x65fe38
		320  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		321   31: 		  31: request lock acquired
		321   40: 		  40: notifying waiting thread
		321   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		322  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		898  620: 		 620: finished waiting
		898  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		899  157: 		 157: sanitizing user input
		899  159: 		 159: checking mpi stages error state
		899  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		900  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		901  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		901  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		902  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		903  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		904  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		905  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		906  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		907  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		908  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		909  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		910  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		910  121: 		 121: free_list 0x65bce0
		910  124: 		 124: new free_list 0
		910  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		911  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		912  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		913  507: 		 507: checking mpi stages error state
		913  514: 		 514: translating request
		913  518: 		 518: persistent check
		913  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		914  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		915  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		916  570: 		 570: sanitizing user input
		916  573: 		 573: checking mpi stages error state
		916  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		916  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		916  589: 		 589: checking persistent 0 and inactive 0
		916  604: 		 604: checking if request complete 0
		916  607: 		 607: will wait for completion
		916  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
	[void exampi::BlockingProgress::progress()]
		323  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		324  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		325  235: 		 235: envelope to send:  e 0 c 0 s 0 d 1 t 0
		325  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		326   31: 		  31: request lock acquired
		326   40: 		  40: notifying waiting thread
		326   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		327  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		916  620: 		 620: finished waiting
		916  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		917  157: 		 157: sanitizing user input
		917  159: 		 159: checking mpi stages error state
		917  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		918  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		919  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		919  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		920  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		921  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		922  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		923  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		924  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		925  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		926  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		927  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		928  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		928  121: 		 121: free_list 0x65bce0
		928  124: 		 124: new free_list 0
		928  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		929  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		930  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		931  507: 		 507: checking mpi stages error state
		931  514: 		 514: translating request
		931  518: 		 518: persistent check
		931  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		932  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		933  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		934  570: 		 570: sanitizing user input
		934  573: 		 573: checking mpi stages error state
		934  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		934  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		934  589: 		 589: checking persistent 0 and inactive 0
		934  604: 		 604: checking if request complete 0
		934  607: 		 607: will wait for completion
		934  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
		327  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		328  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		329  235: 		 235: envelope to send:  e 0 c 0 s 0 d 2 t 0
		329  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		330   31: 		  31: request lock acquired
		330   40: 		  40: notifying waiting thread
		330   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		331  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		934  620: 		 620: finished waiting
		934  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		935  157: 		 157: sanitizing user input
		935  159: 		 159: checking mpi stages error state
		935  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		936  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		937  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		937  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		938  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		939  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		940  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		941  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		942  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		943  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		944  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		945  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		946  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		946  121: 		 121: free_list 0x65bce0
		946  124: 		 124: new free_list 0
		946  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		947  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		948  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		949  507: 		 507: checking mpi stages error state
		949  514: 		 514: translating request
		949  518: 		 518: persistent check
		949  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		950  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		951  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		952  570: 		 570: sanitizing user input
		952  573: 		 573: checking mpi stages error state
		952  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		952  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		952  589: 		 589: checking persistent 0 and inactive 0
		952  604: 		 604: checking if request complete 0
		952  607: 		 607: will wait for completion
		952  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
		331  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		332  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		333  235: 		 235: envelope to send:  e 0 c 0 s 0 d 3 t 0
		333  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		334   31: 		  31: request lock acquired
		334   40: 		  40: notifying waiting thread
		334   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		335  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		952  620: 		 620: finished waiting
		952  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		953  157: 		 157: sanitizing user input
		953  159: 		 159: checking mpi stages error state
		953  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		954  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		955  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		955  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		956  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		957  563: 		 563: returning with error: 0

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		336  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		337  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		337  121: 		 121: free_list 0x65fe38
		337  124: 		 124: new free_list 0x65fe08
		337  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		336  146: 		 146: received header + size of size 28
		336  151: 		 151: header: e 0 c 0 s 1 d 0 t 0
		336  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		337  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		337  121: 		 121: free_list 0x2aaaabb8af68
		337  124: 		 124: new free_list 0x2aaaabb6afd8
		337  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		336  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		335  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		336   27: 		  27: posting message in matcher
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		337  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		338  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		338  121: 		 121: free_list 0x65fe08
		338  124: 		 124: new free_list 0x65fe50
		338  132: 		 132: item is number 4
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		337  146: 		 146: received header + size of size 28
		337  151: 		 151: header: e 0 c 0 s 2 d 0 t 0
		337  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		338  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		338  121: 		 121: free_list 0x2aaaabb6afd8
		338  124: 		 124: new free_list 0x2aaaabb9af30
		338  132: 		 132: item is number 4
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		337  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		338  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		339   27: 		  27: posting message in matcher
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		340  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		341  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		341  121: 		 121: free_list 0x65fe50
		341  124: 		 124: new free_list 0x65fe68
		341  132: 		 132: item is number 5
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		340  146: 		 146: received header + size of size 28
		340  151: 		 151: header: e 0 c 0 s 3 d 0 t 0
		340  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		341  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		341  121: 		 121: free_list 0x2aaaabb9af30
		341  124: 		 124: new free_list 0x2aaaabbaaef8
		341  132: 		 132: item is number 5
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		340  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		341  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		342   27: 		  27: posting message in matcher

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		958  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		959  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		960  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		961  486: 		 486: sanitizing user input
		961  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		962  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		963  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		964  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		964  121: 		 121: free_list 0x65bce0
		964  124: 		 124: new free_list 0
		964  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		965  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		966  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		967  507: 		 507: checking mpi stages error state
		967  514: 		 514: translating request
		967  518: 		 518: persistent check
		967  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		968   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		969   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		970  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		971  570: 		 570: sanitizing user input
		971  573: 		 573: checking mpi stages error state
		971  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		971  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		971  589: 		 589: checking persistent 0 and inactive 0
		971  604: 		 604: checking if request complete 0
		971  607: 		 607: will wait for completion
		971  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		343   54: 		  54: found requests and messages to match
		343   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		344   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 2, dest 0 == 0, tag 0 == 0
		344   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 3, dest 0 == 0, tag 0 == 0
		344   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 1, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		343   94: 		  94: found match, generating match object
		343   98: 		  98: header 0x65fe38 == 0x65bce0
		343  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		344  131: 		 131: progress thread, matched header 0x65fe38 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		345  170: 		 170: handling matched request <-> protocol message
		345  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		346  140: 		 140: freeing item, now at 5 items : arenas 1 pointer 0x2aaaabb8af68
		346  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		347  140: 		 140: freeing item, now at 5 items : arenas 1 pointer 0x65fe38
		347  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		348   31: 		  31: request lock acquired
		348   40: 		  40: notifying waiting thread
		348   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		349  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		971  620: 		 620: finished waiting
		971  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		972  157: 		 157: sanitizing user input
		972  159: 		 159: checking mpi stages error state
		972  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		973  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		974  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		974  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		975  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		976  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		977  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		978  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		979  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		980  486: 		 486: sanitizing user input
		980  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		981  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		982  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		983  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		983  121: 		 121: free_list 0x65bce0
		983  124: 		 124: new free_list 0
		983  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		984  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		985  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		986  507: 		 507: checking mpi stages error state
		986  514: 		 514: translating request
		986  518: 		 518: persistent check
		986  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		987   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		988   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		989  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		990  570: 		 570: sanitizing user input
		990  573: 		 573: checking mpi stages error state
		990  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		990  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		990  589: 		 589: checking persistent 0 and inactive 0
		990  604: 		 604: checking if request complete 0
		990  607: 		 607: will wait for completion
		990  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		350   54: 		  54: found requests and messages to match
		350   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		351   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 2, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		350   94: 		  94: found match, generating match object
		350   98: 		  98: header 0x65fdf0 == 0x65bce0
		350  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		351  131: 		 131: progress thread, matched header 0x65fdf0 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		352  170: 		 170: handling matched request <-> protocol message
		352  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		353  140: 		 140: freeing item, now at 4 items : arenas 1 pointer 0x2aaaabb5b010
		353  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		354  140: 		 140: freeing item, now at 4 items : arenas 1 pointer 0x65fdf0
		354  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		355   31: 		  31: request lock acquired
		355   40: 		  40: notifying waiting thread
		355   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		356  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		990  620: 		 620: finished waiting
		990  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		991  157: 		 157: sanitizing user input
		991  159: 		 159: checking mpi stages error state
		991  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		992  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		993  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		993  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		994  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		995  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		996  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		997  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		998  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		999  486: 		 486: sanitizing user input
		999  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		1000  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		1001  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		1002  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		1002  121: 		 121: free_list 0x65bce0
		1002  124: 		 124: new free_list 0
		1002  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		1003  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		1004  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		1005  507: 		 507: checking mpi stages error state
		1005  514: 		 514: translating request
		1005  518: 		 518: persistent check
		1005  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		1006   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		1007   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		1008  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		1009  570: 		 570: sanitizing user input
		1009  573: 		 573: checking mpi stages error state
		1009  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		1009  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		1009  589: 		 589: checking persistent 0 and inactive 0
		1009  604: 		 604: checking if request complete 0
		1009  607: 		 607: will wait for completion
		1009  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		357   54: 		  54: found requests and messages to match
		357   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		358   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 3 == 3, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		357   94: 		  94: found match, generating match object
		357   98: 		  98: header 0x65fe20 == 0x65bce0
		357  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		358  131: 		 131: progress thread, matched header 0x65fe20 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		359  170: 		 170: handling matched request <-> protocol message
		359  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		360  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x2aaaabb7afa0
		360  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		361  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x65fe20
		361  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		362   31: 		  31: request lock acquired
		362   40: 		  40: notifying waiting thread
		362   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		363  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		1009  620: 		 620: finished waiting
		1009  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		1010  157: 		 157: sanitizing user input
		1010  159: 		 159: checking mpi stages error state
		1010  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		1011  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		1012  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		1012  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		1013  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		1014  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		1015  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		1016  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		1017  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		1018  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		1019  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		1020  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		1021  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		1021  121: 		 121: free_list 0x65bce0
		1021  124: 		 124: new free_list 0
		1021  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		1022  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		1023  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		1024  507: 		 507: checking mpi stages error state
		1024  514: 		 514: translating request
		1024  518: 		 518: persistent check
		1024  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		1025  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		1026  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		1027  570: 		 570: sanitizing user input
		1027  573: 		 573: checking mpi stages error state
		1027  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		1027  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		1027  589: 		 589: checking persistent 0 and inactive 0
		1027  604: 		 604: checking if request complete 0
		1027  607: 		 607: will wait for completion
		1027  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
	[void exampi::BlockingProgress::progress()]
		364  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		365  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		366  235: 		 235: envelope to send:  e 0 c 0 s 0 d 1 t 0
		366  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		367   31: 		  31: request lock acquired
		367   40: 		  40: notifying waiting thread
		367   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		368  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		1027  620: 		 620: finished waiting
		1027  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		1028  157: 		 157: sanitizing user input
		1028  159: 		 159: checking mpi stages error state
		1028  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		1029  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		1030  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		1030  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		1031  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		1032  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		1033  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		1034  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		1035  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		1036  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		1037  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		1038  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		1039  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		1039  121: 		 121: free_list 0x65bce0
		1039  124: 		 124: new free_list 0
		1039  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		1040  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		1041  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		1042  507: 		 507: checking mpi stages error state
		1042  514: 		 514: translating request
		1042  518: 		 518: persistent check
		1042  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		1043  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		1044  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		1045  570: 		 570: sanitizing user input
		1045  573: 		 573: checking mpi stages error state
		1045  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		1045  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		1045  589: 		 589: checking persistent 0 and inactive 0
		1045  604: 		 604: checking if request complete 0
		1045  607: 		 607: will wait for completion
		1045  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
		368  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		369  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		370  235: 		 235: envelope to send:  e 0 c 0 s 0 d 2 t 0
		370  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		371   31: 		  31: request lock acquired
		371   40: 		  40: notifying waiting thread
		371   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		372  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		1045  620: 		 620: finished waiting
		1045  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		1046  157: 		 157: sanitizing user input
		1046  159: 		 159: checking mpi stages error state
		1046  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		1047  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		1048  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		1048  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		1049  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		1050  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		1051  276: 		 276: entry MPI_Send with buf 0x7fffffff0290 count 12000 dest 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		1052  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		1053  202: 		 202: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		1054  420: 		 420: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		1055  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		1056  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		1057  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		1057  121: 		 121: free_list 0x65bce0
		1057  124: 		 124: new free_list 0
		1057  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		1058  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		1059  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		1060  507: 		 507: checking mpi stages error state
		1060  514: 		 514: translating request
		1060  518: 		 518: persistent check
		1060  525: 		 525: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		1061  105: 		 105: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		1062  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		1063  570: 		 570: sanitizing user input
		1063  573: 		 573: checking mpi stages error state
		1063  576: 		 576: checking 0x7fffffff0138 == MPI_REQUEST_NULL 0
		1063  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		1063  589: 		 589: checking persistent 0 and inactive 0
		1063  604: 		 604: checking if request complete 0
		1063  607: 		 607: will wait for completion
		1063  612: 		 612: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
		372  139: 		 139: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		373  216: 		 216: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		374  235: 		 235: envelope to send:  e 0 c 0 s 0 d 3 t 0
		374  277: 		 277: sent 48028 bytes
	[void exampi::Request::release()]
		375   31: 		  31: request lock acquired
		375   40: 		  40: notifying waiting thread
		375   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		376  143: 		 143: sent message

[thread  main]  [src/interfaces/interface.cc]
		1063  620: 		 620: finished waiting
		1063  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		1064  157: 		 157: sanitizing user input
		1064  159: 		 159: checking mpi stages error state
		1064  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		1065  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		1066  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		1066  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		1067  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0138
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		1068  563: 		 563: returning with error: 0

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		377  118: 		 118: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		378  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		378  121: 		 121: free_list 0x65fe20
		378  124: 		 124: new free_list 0x65fdf0
		378  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		377  146: 		 146: received header + size of size 28
		377  151: 		 151: header: e 0 c 0 s 1 d 0 t 0
		377  152: 		 152: payload length 48000
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		378  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		378  121: 		 121: free_list 0x2aaaabb7afa0
		378  124: 		 124: new free_list 0x2aaaabb5b010
		378  132: 		 132: item is number 3
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		377  181: 		 181: received payload of size 48028
	[void exampi::BlockingProgress::progress()]
		376  123: 		 123: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		377   27: 		  27: posting message in matcher

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		1069  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		1070  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		1071  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		1072  486: 		 486: sanitizing user input
		1072  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		1073  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		1074  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		1075  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		1075  121: 		 121: free_list 0x65bce0
		1075  124: 		 124: new free_list 0
		1075  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		1076  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		1077  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		1078  507: 		 507: checking mpi stages error state
		1078  514: 		 514: translating request
		1078  518: 		 518: persistent check
		1078  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		1079   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		1080   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		1081  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		1082  570: 		 570: sanitizing user input
		1082  573: 		 573: checking mpi stages error state
		1082  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		1082  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		1082  589: 		 589: checking persistent 0 and inactive 0
		1082  604: 		 604: checking if request complete 0
		1082  607: 		 607: will wait for completion
		1082  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		378   54: 		  54: found requests and messages to match
		378   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		379   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 2, dest 0 == 0, tag 0 == 0
		379   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 3, dest 0 == 0, tag 0 == 0
		379   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 1, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		378   94: 		  94: found match, generating match object
		378   98: 		  98: header 0x65fe20 == 0x65bce0
		378  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		379  131: 		 131: progress thread, matched header 0x65fe20 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		380  170: 		 170: handling matched request <-> protocol message
		380  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		381  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x2aaaabb7afa0
		381  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		382  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x65fe20
		382  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		383   31: 		  31: request lock acquired
		383   40: 		  40: notifying waiting thread
		383   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		384  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		1082  620: 		 620: finished waiting
		1082  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		1083  157: 		 157: sanitizing user input
		1083  159: 		 159: checking mpi stages error state
		1083  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		1084  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		1085  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		1085  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		1086  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		1087  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		1088  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		1089  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		1090  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		1091  486: 		 486: sanitizing user input
		1091  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		1092  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		1093  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		1094  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		1094  121: 		 121: free_list 0x65bce0
		1094  124: 		 124: new free_list 0
		1094  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		1095  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		1096  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		1097  507: 		 507: checking mpi stages error state
		1097  514: 		 514: translating request
		1097  518: 		 518: persistent check
		1097  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		1098   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		1099   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		1100  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		1101  570: 		 570: sanitizing user input
		1101  573: 		 573: checking mpi stages error state
		1101  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		1101  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		1101  589: 		 589: checking persistent 0 and inactive 0
		1101  604: 		 604: checking if request complete 0
		1101  607: 		 607: will wait for completion
		1101  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		385   54: 		  54: found requests and messages to match
		385   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		386   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 2, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		385   94: 		  94: found match, generating match object
		385   98: 		  98: header 0x65fe08 == 0x65bce0
		385  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		386  131: 		 131: progress thread, matched header 0x65fe08 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		387  170: 		 170: handling matched request <-> protocol message
		387  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		388  140: 		 140: freeing item, now at 2 items : arenas 1 pointer 0x2aaaabb6afd8
		388  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		389  140: 		 140: freeing item, now at 2 items : arenas 1 pointer 0x65fe08
		389  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		390   31: 		  31: request lock acquired
		390   40: 		  40: notifying waiting thread
		390   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		391  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		1101  620: 		 620: finished waiting
		1101  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		1102  157: 		 157: sanitizing user input
		1102  159: 		 159: checking mpi stages error state
		1102  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		1103  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		1104  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		1104  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		1105  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		1106  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		1107  305: 		 305: entry MPI_Recv with buf 0x7fffffff0290 count 12000 src 3 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		1108  255: 		 255: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		1109  226: 		 226: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		1110  486: 		 486: sanitizing user input
		1110  493: 		 493: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		1111  366: 		 366: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		1112  107: 		 107: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		1113  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		1113  121: 		 121: free_list 0x65bce0
		1113  124: 		 124: new free_list 0
		1113  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		1114  405: 		 405: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		1115  243: 		 243: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		1116  507: 		 507: checking mpi stages error state
		1116  514: 		 514: translating request
		1116  518: 		 518: persistent check
		1116  525: 		 525: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		1117   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		1118   73: 		  73: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		1119  262: 		 262: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		1120  570: 		 570: sanitizing user input
		1120  573: 		 573: checking mpi stages error state
		1120  576: 		 576: checking 0x7fffffff0128 == MPI_REQUEST_NULL 0
		1120  585: 		 585: translated MPI_Request to Request_ptr: 0x65bce0
		1120  589: 		 589: checking persistent 0 and inactive 0
		1120  604: 		 604: checking if request complete 0
		1120  607: 		 607: will wait for completion
		1120  612: 		 612: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		392   54: 		  54: found requests and messages to match
		392   65: 		  65: picked up request: 0x65bce0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		393   73: 		  73: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 3 == 3, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		392   94: 		  94: found match, generating match object
		392   98: 		  98: header 0x65fe50 == 0x65bce0
		392  104: 		 104: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		393  131: 		 131: progress thread, matched header 0x65fe50 == request 0x65bce0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		394  170: 		 170: handling matched request <-> protocol message
		394  187: 		 187: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		395  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb9af30
		395  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		396  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65fe50
		396  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		397   31: 		  31: request lock acquired
		397   40: 		  40: notifying waiting thread
		397   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		398  193: 		 193: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		1120  620: 		 620: finished waiting
		1120  626: 		 626: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		1121  157: 		 157: sanitizing user input
		1121  159: 		 159: checking mpi stages error state
		1121  179: 		 179: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		1122  113: 		 113: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		1123  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x65bce0
		1123  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		1124  187: 		 187: invalidating user MPI_Request handle: addr 0x7fffffff0128
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		1125  563: 		 563: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Finalize()]
		1126  144: 		 144: MPI_Finalize
	[void exampi::Universe::finalize()]
		1127   88: 		  88: universe finalize called
		1127   92: 		  92: progress engine being removed
	[virtual exampi::BlockingProgress::~BlockingProgress()]
		1128   52: 		  52: halting all progress threads
		1128   55: 		  55: informed all threads to shutdown
		1128   61: 		  61: joined all threads
	[void exampi::Universe::finalize()]
		1127   98: 		  98: deleting all communicators
		1127  101: 		 101: deleting all groups
	[virtual int exampi::BasicInterface::MPI_Finalize()]
		1126  149: 		 149: Finalize returns
	[void exampi::Universe::finalize()]
		1127   88: 		  88: universe finalize called
		1127   92: 		  92: progress engine being removed
		1127   98: 		  98: deleting all communicators
		1127  101: 		 101: deleting all groups
	[exampi::Universe::~Universe()]
		1128   78: 		  78: terminating universe
