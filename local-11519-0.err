	[exampi::MemoryPool<T>::MemoryPool(size_t) [with T = exampi::Request; size_t = long unsigned int]]
		0   95: 		  95: free_list starts at: 0x6775a0
	[exampi::Universe::Universe()]
		1   21: 		  21: creating universe
		1   39: 		  39: rank 0
		1   46: 		  46: epoch file /var/tmp/sultana1/exampi_bDBIr0.11519.0
		1   53: 		  53: epoch 0
		1   60: 		  60: world size 8
		1   64: 		  64: mpi stages enabled 0
		1   71: 		  71: finished creating universe
	[virtual int exampi::BasicInterface::MPI_Init(int*, char***)]
		2   31: 		  31: MPI_Init entered. argc=6
		2   39: 		  39: MPI_Init passed EXAMPI_LAUNCHED check.
	[exampi::MemoryPool<T>::MemoryPool(size_t) [with T = exampi::Header; size_t = long unsigned int]]
		3   95: 		  95: free_list starts at: 0x67b610
	[exampi::MemoryPool<T>::MemoryPool(size_t) [with T = exampi::UDPTransportPayload; size_t = long unsigned int]]
		4   95: 		  95: free_list starts at: 0x2aaaabb5b010
	[exampi::UDPTransport::UDPTransport()]
		5   34: 		  34: udp transport port: 33421
	[exampi::Config::Config()]
		6   17: 		  17: config loading /var/tmp/sultana1/exampi_qjbguZ.11519.0
	[exampi::BlockingProgress::BlockingProgress(std::unique_ptr<exampi::Matcher>, std::unique_ptr<exampi::Transport>, std::unique_ptr<exampi::Decider>)]
		7   39: 		  39: starting progress thread 0
		7   44: 		  44: progress threads running
	[virtual int exampi::BasicInterface::MPI_Init(int*, char***)]
		8   47: 		  47: generating world group
		8   51: 		  51: generating world communicator
		8   54: 		  54: generating universe datatypes
		8   58: 		  58: executing daemon barrier 0
	[exampi::Daemon::Daemon()]
		9   38: 		  38: getting hostname as quartz1148
		9   42: 		  42: getting local ip as 192.168.132.132
		9   45: 		  45: daemon port 27196
		9   52: 		  52: generated daemon sockaddr_in
		9   57: 		  57: attempting connection to daemon
		9   73: 		  73: tcp connection to daemon established
	[int exampi::Daemon::send_barrier_ready()]
		10  132: 		 132: send_barrier_ready:barrier 0 11598                                                  64
	[int exampi::Daemon::send(std::__cxx11::string)]
		11  229: 		 229: send packet to daemon: barrier 0 11598                                                 
	[int exampi::Daemon::recv_barrier_release()]
		12  141: 		 141: in recv_barrier_release 0
		12  145: 		 145: rank recv barrier release 64 msg release
		12  152: 		 152: rank 0 recv barrier release
		12  153: 		 153: rank 0 release
	[int exampi::Daemon::barrier()]
		13   91: 		  91: daemon: barrier complete
	[virtual int exampi::BasicInterface::MPI_Comm_size(MPI_Comm, int*)]
		14  739: 		 739: checking mpi stages error state
		14  747: 		 747: called MPI_Comm_size: 8
	[virtual int exampi::BasicInterface::MPI_Comm_rank(MPI_Comm, int*)]
		15  724: 		 724: checking mpi stages error state
		15  732: 		 732: called MPI_Comm_rank: 0
		15  724: 		 724: checking mpi stages error state
		15  732: 		 732: called MPI_Comm_rank: 0
		15  724: 		 724: checking mpi stages error state
		15  732: 		 732: called MPI_Comm_rank: 0
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		16  352: 		 352: entry MPI_Irend with buf 0x2aaaac605010 count 961 src 4 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		17  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		18  484: 		 484: sanitizing user input
		18  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		19  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		20   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		21  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		21  121: 		 121: free_list 0x6775a0
		21  124: 		 124: new free_list 0x677610
		21  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		22  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		23  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		24  505: 		 505: checking mpi stages error state
		24  512: 		 512: translating request
		24  516: 		 516: persistent check
		24  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		25   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		26   97: 		  97: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		27  352: 		 352: entry MPI_Irend with buf 0x2aaaac606e90 count 961 src 2 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		28  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		29  484: 		 484: sanitizing user input
		29  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		30  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		31   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		32  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		32  121: 		 121: free_list 0x677610
		32  124: 		 124: new free_list 0x677680
		32  132: 		 132: item is number 2
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		33  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		34  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		35  505: 		 505: checking mpi stages error state
		35  512: 		 512: translating request
		35  516: 		 516: persistent check
		35  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		36   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		37   97: 		  97: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		38  352: 		 352: entry MPI_Irend with buf 0x2aaaac608d10 count 961 src 1 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		39  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		40  484: 		 484: sanitizing user input
		40  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		41  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		42   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		43  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		43  121: 		 121: free_list 0x677680
		43  124: 		 124: new free_list 0x6776f0
		43  132: 		 132: item is number 3
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		44  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		45  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		46  505: 		 505: checking mpi stages error state
		46  512: 		 512: translating request
		46  516: 		 516: persistent check
		46  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		47   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		48   97: 		  97: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		49  352: 		 352: entry MPI_Irend with buf 0x2aaaac60ab90 count 31 src 3 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		50  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		51  484: 		 484: sanitizing user input
		51  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		52  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		53   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		54  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		54  121: 		 121: free_list 0x6776f0
		54  124: 		 124: new free_list 0x677760
		54  132: 		 132: item is number 4
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		55  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		56  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		57  505: 		 505: checking mpi stages error state
		57  512: 		 512: translating request
		57  516: 		 516: persistent check
		57  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		58   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		59   97: 		  97: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		60  352: 		 352: entry MPI_Irend with buf 0x2aaaac60ac90 count 31 src 6 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		61  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		62  484: 		 484: sanitizing user input
		62  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		63  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		64   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		65  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		65  121: 		 121: free_list 0x677760
		65  124: 		 124: new free_list 0x6777d0
		65  132: 		 132: item is number 5
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		66  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		67  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		68  505: 		 505: checking mpi stages error state
		68  512: 		 512: translating request
		68  516: 		 516: persistent check
		68  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		69   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		70   97: 		  97: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		71  352: 		 352: entry MPI_Irend with buf 0x2aaaac60ad90 count 31 src 5 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		72  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		73  484: 		 484: sanitizing user input
		73  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		74  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		75   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		76  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		76  121: 		 121: free_list 0x6777d0
		76  124: 		 124: new free_list 0x677840
		76  132: 		 132: item is number 6
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		77  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		78  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		79  505: 		 505: checking mpi stages error state
		79  512: 		 512: translating request
		79  516: 		 516: persistent check
		79  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		80   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		81   97: 		  97: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		82  352: 		 352: entry MPI_Irend with buf 0x2aaaac60ae90 count 1 src 7 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		83  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		84  484: 		 484: sanitizing user input
		84  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		85  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		86   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		87  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		87  121: 		 121: free_list 0x677840
		87  124: 		 124: new free_list 0x6778b0
		87  132: 		 132: item is number 7
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		88  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		89  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		90  505: 		 505: checking mpi stages error state
		90  512: 		 512: translating request
		90  516: 		 516: persistent check
		90  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		91   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		92   97: 		  97: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Comm_rank(MPI_Comm, int*)]
		93  724: 		 724: checking mpi stages error state
		93  732: 		 732: called MPI_Comm_rank: 0
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		94  326: 		 326: entry MPI_Isend with buf 0x2aaaac5e1010 count 961 dest 4 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		95  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		96  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		97  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		98   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		99  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		99  121: 		 121: free_list 0x6778b0
		99  124: 		 124: new free_list 0x677920
		99  132: 		 132: item is number 8
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		100  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		101  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		102  505: 		 505: checking mpi stages error state
		102  512: 		 512: translating request
		102  516: 		 516: persistent check
		102  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		103  129: 		 129: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		104  326: 		 326: entry MPI_Isend with buf 0x2aaaac5e2e90 count 961 dest 2 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		105  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		106  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		107  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		108   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		109  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		109  121: 		 121: free_list 0x677920
		109  124: 		 124: new free_list 0x677990
		109  132: 		 132: item is number 9
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		110  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		111  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		112  505: 		 505: checking mpi stages error state
		112  512: 		 512: translating request
		112  516: 		 516: persistent check
		112  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		113  129: 		 129: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		114  326: 		 326: entry MPI_Isend with buf 0x2aaaac5e4d10 count 961 dest 1 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		115  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		116  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		117  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		118   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		119  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		119  121: 		 121: free_list 0x677990
		119  124: 		 124: new free_list 0x677a00
		119  132: 		 132: item is number 10
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		120  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		121  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		122  505: 		 505: checking mpi stages error state
		122  512: 		 512: translating request
		122  516: 		 516: persistent check
		122  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		123  129: 		 129: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		124  326: 		 326: entry MPI_Isend with buf 0x2aaaac5e6b90 count 31 dest 3 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		125  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		126  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		127  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		128   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		129  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		129  121: 		 121: free_list 0x677a00
		129  124: 		 124: new free_list 0x677a70
		129  132: 		 132: item is number 11
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		130  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		131  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		132  505: 		 505: checking mpi stages error state
		132  512: 		 512: translating request
		132  516: 		 516: persistent check
		132  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		133  129: 		 129: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		134  326: 		 326: entry MPI_Isend with buf 0x2aaaac5e6c90 count 31 dest 6 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		135  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		136  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		137  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		138   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		139  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		139  121: 		 121: free_list 0x677a70
		139  124: 		 124: new free_list 0x677ae0
		139  132: 		 132: item is number 12
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		140  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		141  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		142  505: 		 505: checking mpi stages error state
		142  512: 		 512: translating request
		142  516: 		 516: persistent check
		142  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		143  129: 		 129: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		144  326: 		 326: entry MPI_Isend with buf 0x2aaaac5e6d90 count 31 dest 5 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		145  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		146  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		147  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		148   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		149  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		149  121: 		 121: free_list 0x677ae0
		149  124: 		 124: new free_list 0x677b50
		149  132: 		 132: item is number 13
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		150  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		151  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		152  505: 		 505: checking mpi stages error state
		152  512: 		 512: translating request
		152  516: 		 516: persistent check
		152  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		153  129: 		 129: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		154  326: 		 326: entry MPI_Isend with buf 0x2aaaac5e6e90 count 1 dest 7 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		155  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		156  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		157  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		158   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		159  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		159  121: 		 121: free_list 0x677b50
		159  124: 		 124: new free_list 0x677bc0
		159  132: 		 132: item is number 14
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		160  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		161  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		162  505: 		 505: checking mpi stages error state
		162  512: 		 512: translating request
		162  516: 		 516: persistent check
		162  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		163  129: 		 129: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Waitall(int, MPI_Request*, MPI_Status*)]
		164  634: 		 634: checking mpi stages error state
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		165  568: 		 568: sanitizing user input
		165  571: 		 571: checking mpi stages error state
		165  574: 		 574: checking 0x67e770 == MPI_REQUEST_NULL 0
		165  583: 		 583: translated MPI_Request to Request_ptr: 0x6778b0
		165  587: 		 587: checking persistent 0 and inactive 0
		165  602: 		 602: checking if request complete 0
		165  605: 		 605: will wait for completion
		165  610: 		 610: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
	[void exampi::BlockingProgress::progress()]
		0  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		1  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		2  229: 		 229: envelope to send: e 0 c 0 s 0 d 4 t 1024
		2  259: 		 259: sent 7716 bytes
	[void exampi::Request::release()]
		3   31: 		  31: request lock acquired
		3   40: 		  40: notifying waiting thread
		3   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		4  167: 		 167: sent message
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		5  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		6  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		6  121: 		 121: free_list 0x67b610
		6  124: 		 124: new free_list 0x67b628
		6  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		5  143: 		 143: received header + size of size 28
		5  148: 		 148: header: e 0 c 0 s 4 d 0 t 1024
		5  149: 		 149: payload length 7688
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		6  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		6  121: 		 121: free_list 0x2aaaabb5b010
		6  124: 		 124: new free_list 0x2aaaabb6afd8

[thread  main]  [src/interfaces/interface.cc]
		165  618: 		 618: finished waiting
		165  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		166  155: 		 155: sanitizing user input
		166  157: 		 157: checking mpi stages error state
		166  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		167  101: 		 101: freeing request to memory pool

[thread undef] [include/pool.h]
		6  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		5  177: 		 177: received payload of size 7716
	[void exampi::BlockingProgress::progress()]
		4  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		5   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		6   59: 		  59: found requests and messages to match
		6   70: 		  70: picked up request: 0x6775a0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		7   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 4 == 4, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		6   99: 		  99: found match, generating match object
		6  103: 		 103: header 0x67b610 == 0x6775a0
		6  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		7  155: 		 155: progress thread, matched header 0x67b610 == request 0x6775a0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		8  194: 		 194: handling matched request <-> protocol message
		8  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		9  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		9  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		10  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		10  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		11   31: 		  31: request lock acquired
		11   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		12  217: 		 217: request completed and released
	[void exampi::BlockingProgress::progress()]
		13  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		14  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		15  229: 		 229: envelope to send: e 0 c 0 s 0 d 2 t 1024

[thread  main]  [include/pool.h]
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		168  140: 		 140: freeing item, now at 14 items : arenas 1 pointer 0x6778b0
		168  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		169  185: 		 185: invalidating user MPI_Request handle: addr 0x67e770
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		170  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		171  568: 		 568: sanitizing user input
		171  571: 		 571: checking mpi stages error state
		171  574: 		 574: checking 0x67e778 == MPI_REQUEST_NULL 0
		171  583: 		 583: translated MPI_Request to Request_ptr: 0x677920
		171  587: 		 587: checking persistent 0 and inactive 0
		171  602: 		 602: checking if request complete 0
		171  605: 		 605: will wait for completion
		171  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
		15  259: 		 259: sent 7716 bytes
	[void exampi::Request::release()]
		16   31: 		  31: request lock acquired
		16   40: 		  40: notifying waiting thread
		16   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		17  167: 		 167: sent message
		17  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		18  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		19  229: 		 229: envelope to send: e 0 c 0 s 0 d 1 t 1024

[thread  main]  [src/interfaces/interface.cc]
		171  618: 		 618: finished waiting
		171  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		172  155: 		 155: sanitizing user input
		172  157: 		 157: checking mpi stages error state
		172  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		173  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		174  140: 		 140: freeing item, now at 13 items : arenas 1 pointer 0x677920
		174  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		175  185: 		 185: invalidating user MPI_Request handle: addr 0x67e778
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		176  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		177  568: 		 568: sanitizing user input
		177  571: 		 571: checking mpi stages error state
		177  574: 		 574: checking 0x67e780 == MPI_REQUEST_NULL 0
		177  583: 		 583: translated MPI_Request to Request_ptr: 0x677990
		177  587: 		 587: checking persistent 0 and inactive 0
		177  602: 		 602: checking if request complete 0
		177  605: 		 605: will wait for completion
		177  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
		19  259: 		 259: sent 7716 bytes
	[void exampi::Request::release()]
		20   31: 		  31: request lock acquired
		20   40: 		  40: notifying waiting thread
		20   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		21  167: 		 167: sent message
		21  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		22  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		23  229: 		 229: envelope to send: e 0 c 0 s 0 d 3 t 1024

[thread  main]  [src/interfaces/interface.cc]
		177  618: 		 618: finished waiting
		177  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		178  155: 		 155: sanitizing user input
		178  157: 		 157: checking mpi stages error state
		178  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		179  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		180  140: 		 140: freeing item, now at 12 items : arenas 1 pointer 0x677990
		180  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		181  185: 		 185: invalidating user MPI_Request handle: addr 0x67e780
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		182  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		183  568: 		 568: sanitizing user input
		183  571: 		 571: checking mpi stages error state
		183  574: 		 574: checking 0x67e788 == MPI_REQUEST_NULL 0
		183  583: 		 583: translated MPI_Request to Request_ptr: 0x677a00
		183  587: 		 587: checking persistent 0 and inactive 0
		183  602: 		 602: checking if request complete 0
		183  605: 		 605: will wait for completion
		183  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
		23  259: 		 259: sent 276 bytes
	[void exampi::Request::release()]
		24   31: 		  31: request lock acquired
		24   40: 		  40: notifying waiting thread
		24   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		25  167: 		 167: sent message
		25  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		26  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		27  229: 		 229: envelope to send: e 0 c 0 s 0 d 6 t 1024

[thread  main]  [src/interfaces/interface.cc]
		183  618: 		 618: finished waiting
		183  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		184  155: 		 155: sanitizing user input
		184  157: 		 157: checking mpi stages error state
		184  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		185  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		186  140: 		 140: freeing item, now at 11 items : arenas 1 pointer 0x677a00
		186  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		187  185: 		 185: invalidating user MPI_Request handle: addr 0x67e788
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		188  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		189  568: 		 568: sanitizing user input
		189  571: 		 571: checking mpi stages error state
		189  574: 		 574: checking 0x67e790 == MPI_REQUEST_NULL 0
		189  583: 		 583: translated MPI_Request to Request_ptr: 0x677a70
		189  587: 		 587: checking persistent 0 and inactive 0
		189  602: 		 602: checking if request complete 0
		189  605: 		 605: will wait for completion
		189  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
		27  259: 		 259: sent 276 bytes
	[void exampi::Request::release()]
		28   31: 		  31: request lock acquired
		28   40: 		  40: notifying waiting thread
		28   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		29  167: 		 167: sent message
		29  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		30  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		31  229: 		 229: envelope to send: e 0 c 0 s 0 d 5 t 1024

[thread  main]  [src/interfaces/interface.cc]
		189  618: 		 618: finished waiting
		189  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		190  155: 		 155: sanitizing user input
		190  157: 		 157: checking mpi stages error state
		190  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		191  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		192  140: 		 140: freeing item, now at 10 items : arenas 1 pointer 0x677a70
		192  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		193  185: 		 185: invalidating user MPI_Request handle: addr 0x67e790
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		194  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		195  568: 		 568: sanitizing user input
		195  571: 		 571: checking mpi stages error state
		195  574: 		 574: checking 0x67e798 == MPI_REQUEST_NULL 0
		195  583: 		 583: translated MPI_Request to Request_ptr: 0x677ae0
		195  587: 		 587: checking persistent 0 and inactive 0
		195  602: 		 602: checking if request complete 0
		195  605: 		 605: will wait for completion
		195  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
		31  259: 		 259: sent 276 bytes
	[void exampi::Request::release()]
		32   31: 		  31: request lock acquired
		32   40: 		  40: notifying waiting thread
		32   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		33  167: 		 167: sent message
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		34  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		35  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		35  121: 		 121: free_list 0x67b610
		35  124: 		 124: new free_list 0x67b628
		35  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		34  143: 		 143: received header + size of size 28
		34  148: 		 148: header: e 0 c 0 s 3 d 0 t 1024
		34  149: 		 149: payload length 248
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		35  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		35  121: 		 121: free_list 0x2aaaabb5b010
		35  124: 		 124: new free_list 0x2aaaabb6afd8
		35  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		34  177: 		 177: received payload of size 276
	[void exampi::BlockingProgress::progress()]
		33  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		34   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		35   59: 		  59: found requests and messages to match
		35   70: 		  70: picked up request: 0x677610
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		36   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 3, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		35  117: 		 117: no match with request
		35   70: 		  70: picked up request: 0x677680
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		36   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 3, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		35  117: 		 117: no match with request
		35   70: 		  70: picked up request: 0x6776f0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		36   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 3 == 3, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		35   99: 		  99: found match, generating match object
		35  103: 		 103: header 0x67b610 == 0x6776f0
		35  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		36  155: 		 155: progress thread, matched header 0x67b610 == request 0x6776f0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		37  194: 		 194: handling matched request <-> protocol message
		37  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		38  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		38  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		39  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		39  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		40   31: 		  31: request lock acquired
		40   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		41  217: 		 217: request completed and released
	[void exampi::BlockingProgress::progress()]
		42  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		43  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		44  229: 		 229: envelope to send: e 0 c 0 s 0 d 7 t 1024

[thread  main]  [src/interfaces/interface.cc]
		195  618: 		 618: finished waiting
		195  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		196  155: 		 155: sanitizing user input
		196  157: 		 157: checking mpi stages error state
		196  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		197  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		198  140: 		 140: freeing item, now at 9 items : arenas 1 pointer 0x677ae0
		198  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		199  185: 		 185: invalidating user MPI_Request handle: addr 0x67e798
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		200  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		201  568: 		 568: sanitizing user input
		201  571: 		 571: checking mpi stages error state
		201  574: 		 574: checking 0x67e7a0 == MPI_REQUEST_NULL 0
		201  583: 		 583: translated MPI_Request to Request_ptr: 0x677b50
		201  587: 		 587: checking persistent 0 and inactive 0
		201  602: 		 602: checking if request complete 0
		201  605: 		 605: will wait for completion
		201  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
		44  259: 		 259: sent 36 bytes
	[void exampi::Request::release()]
		45   31: 		  31: request lock acquired
		45   40: 		  40: notifying waiting thread
		45   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		46  167: 		 167: sent message
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		47  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		48  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		48  121: 		 121: free_list 0x67b610
		48  124: 		 124: new free_list 0x67b628
		48  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		47  143: 		 143: received header + size of size 28
		47  148: 		 148: header: e 0 c 0 s 6 d 0 t 1024
		47  149: 		 149: payload length 248
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		48  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		48  121: 		 121: free_list 0x2aaaabb5b010
		48  124: 		 124: new free_list 0x2aaaabb6afd8
		48  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		47  177: 		 177: received payload of size 276
	[void exampi::BlockingProgress::progress()]
		46  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		47   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		48   59: 		  59: found requests and messages to match
		48   70: 		  70: picked up request: 0x677610
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		49   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 6, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		48  117: 		 117: no match with request
		48   70: 		  70: picked up request: 0x677680
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		49   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 6, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		48  117: 		 117: no match with request
		48   70: 		  70: picked up request: 0x677760
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		49   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 6 == 6, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		48   99: 		  99: found match, generating match object
		48  103: 		 103: header 0x67b610 == 0x677760
		48  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		49  155: 		 155: progress thread, matched header 0x67b610 == request 0x677760
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		50  194: 		 194: handling matched request <-> protocol message
		50  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		51  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		51  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		52  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		52  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		53   31: 		  31: request lock acquired
		53   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		54  217: 		 217: request completed and released
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		55  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		56  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		56  121: 		 121: free_list 0x67b610
		56  124: 		 124: new free_list 0x67b628
		56  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		55  143: 		 143: received header + size of size 28
		55  148: 		 148: header: e 0 c 0 s 7 d 0 t 1024
		55  149: 		 149: payload length 8
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		56  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		56  121: 		 121: free_list 0x2aaaabb5b010
		56  124: 		 124: new free_list 0x2aaaabb6afd8
		56  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		55  177: 		 177: received payload of size 36
	[void exampi::BlockingProgress::progress()]
		56  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		57   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		58   59: 		  59: found requests and messages to match
		58   70: 		  70: picked up request: 0x677610
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		59   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 7, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		58  117: 		 117: no match with request
		58   70: 		  70: picked up request: 0x677680
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		59   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 7, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		58  117: 		 117: no match with request
		58   70: 		  70: picked up request: 0x6777d0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		59   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 5 == 7, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		58  117: 		 117: no match with request
		58   70: 		  70: picked up request: 0x677840
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		59   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 7 == 7, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		58   99: 		  99: found match, generating match object
		58  103: 		 103: header 0x67b610 == 0x677840
		58  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		59  155: 		 155: progress thread, matched header 0x67b610 == request 0x677840
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		60  194: 		 194: handling matched request <-> protocol message
		60  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		61  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		61  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		62  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		62  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		63   31: 		  31: request lock acquired
		63   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		64  217: 		 217: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		201  618: 		 618: finished waiting
		201  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		202  155: 		 155: sanitizing user input
		202  157: 		 157: checking mpi stages error state
		202  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		203  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		204  140: 		 140: freeing item, now at 8 items : arenas 1 pointer 0x677b50
		204  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		205  185: 		 185: invalidating user MPI_Request handle: addr 0x67e7a0
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		206  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Comm_rank(MPI_Comm, int*)]
		207  724: 		 724: checking mpi stages error state
		207  732: 		 732: called MPI_Comm_rank: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		208  568: 		 568: sanitizing user input
		208  571: 		 571: checking mpi stages error state
		208  574: 		 574: checking 0x67e6a0 == MPI_REQUEST_NULL 0
		208  583: 		 583: translated MPI_Request to Request_ptr: 0x6775a0
		208  587: 		 587: checking persistent 0 and inactive 0
		208  602: 		 602: checking if request complete 1
		208  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		209  155: 		 155: sanitizing user input
		209  157: 		 157: checking mpi stages error state
		209  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		210  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		211  140: 		 140: freeing item, now at 7 items : arenas 1 pointer 0x6775a0
		211  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		212  185: 		 185: invalidating user MPI_Request handle: addr 0x67e6a0
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		213  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		214  568: 		 568: sanitizing user input
		214  571: 		 571: checking mpi stages error state
		214  574: 		 574: checking 0x67e6a8 == MPI_REQUEST_NULL 0
		214  583: 		 583: translated MPI_Request to Request_ptr: 0x677610
		214  587: 		 587: checking persistent 0 and inactive 0
		214  602: 		 602: checking if request complete 0
		214  605: 		 605: will wait for completion
		214  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		65  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		66  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		66  121: 		 121: free_list 0x67b610
		66  124: 		 124: new free_list 0x67b628
		66  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		65  143: 		 143: received header + size of size 28
		65  148: 		 148: header: e 0 c 0 s 2 d 0 t 1024
		65  149: 		 149: payload length 7688
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		66  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		66  121: 		 121: free_list 0x2aaaabb5b010
		66  124: 		 124: new free_list 0x2aaaabb6afd8
		66  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		65  177: 		 177: received payload of size 7716
	[void exampi::BlockingProgress::progress()]
		66  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		67   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		68   59: 		  59: found requests and messages to match
		68   70: 		  70: picked up request: 0x677610
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		69   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 2, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		68   99: 		  99: found match, generating match object
		68  103: 		 103: header 0x67b610 == 0x677610
		68  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		69  155: 		 155: progress thread, matched header 0x67b610 == request 0x677610
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		70  194: 		 194: handling matched request <-> protocol message
		70  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		71  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		71  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		72  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		72  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		73   31: 		  31: request lock acquired
		73   40: 		  40: notifying waiting thread
		73   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		74  217: 		 217: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		214  618: 		 618: finished waiting
		214  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		215  155: 		 155: sanitizing user input
		215  157: 		 157: checking mpi stages error state
		215  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		216  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		217  140: 		 140: freeing item, now at 6 items : arenas 1 pointer 0x677610
		217  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		218  185: 		 185: invalidating user MPI_Request handle: addr 0x67e6a8
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		219  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		220  568: 		 568: sanitizing user input
		220  571: 		 571: checking mpi stages error state
		220  574: 		 574: checking 0x67e6b0 == MPI_REQUEST_NULL 0
		220  583: 		 583: translated MPI_Request to Request_ptr: 0x677680
		220  587: 		 587: checking persistent 0 and inactive 0
		220  602: 		 602: checking if request complete 0
		220  605: 		 605: will wait for completion
		220  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		75  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		76  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		76  121: 		 121: free_list 0x67b610
		76  124: 		 124: new free_list 0x67b628
		76  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		75  143: 		 143: received header + size of size 28
		75  148: 		 148: header: e 0 c 0 s 5 d 0 t 1024
		75  149: 		 149: payload length 248
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		76  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		76  121: 		 121: free_list 0x2aaaabb5b010
		76  124: 		 124: new free_list 0x2aaaabb6afd8
		76  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		75  177: 		 177: received payload of size 276
	[void exampi::BlockingProgress::progress()]
		76  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		77   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		78   59: 		  59: found requests and messages to match
		78   70: 		  70: picked up request: 0x677680
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		79   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 5, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		78  117: 		 117: no match with request
		78   70: 		  70: picked up request: 0x6777d0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		79   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 5 == 5, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		78   99: 		  99: found match, generating match object
		78  103: 		 103: header 0x67b610 == 0x6777d0
		78  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		79  155: 		 155: progress thread, matched header 0x67b610 == request 0x6777d0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		80  194: 		 194: handling matched request <-> protocol message
		80  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		81  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		81  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		82  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		82  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		83   31: 		  31: request lock acquired
		83   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		84  217: 		 217: request completed and released
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		85  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		86  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		86  121: 		 121: free_list 0x67b610
		86  124: 		 124: new free_list 0x67b628
		86  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		85  143: 		 143: received header + size of size 28
		85  148: 		 148: header: e 0 c 0 s 1 d 0 t 1024
		85  149: 		 149: payload length 7688
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		86  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		86  121: 		 121: free_list 0x2aaaabb5b010
		86  124: 		 124: new free_list 0x2aaaabb6afd8
		86  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		85  177: 		 177: received payload of size 7716
	[void exampi::BlockingProgress::progress()]
		86  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		87   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		88   59: 		  59: found requests and messages to match
		88   70: 		  70: picked up request: 0x677680
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		89   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 1, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		88   99: 		  99: found match, generating match object
		88  103: 		 103: header 0x67b610 == 0x677680
		88  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		89  155: 		 155: progress thread, matched header 0x67b610 == request 0x677680
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		90  194: 		 194: handling matched request <-> protocol message
		90  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		91  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		91  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		92  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		92  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		93   31: 		  31: request lock acquired
		93   40: 		  40: notifying waiting thread
		93   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		94  217: 		 217: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		220  618: 		 618: finished waiting
		220  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		221  155: 		 155: sanitizing user input
		221  157: 		 157: checking mpi stages error state
		221  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		222  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		223  140: 		 140: freeing item, now at 5 items : arenas 1 pointer 0x677680
		223  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		224  185: 		 185: invalidating user MPI_Request handle: addr 0x67e6b0
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		225  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		226  568: 		 568: sanitizing user input
		226  571: 		 571: checking mpi stages error state
		226  574: 		 574: checking 0x67e6b8 == MPI_REQUEST_NULL 0
		226  583: 		 583: translated MPI_Request to Request_ptr: 0x6776f0
		226  587: 		 587: checking persistent 0 and inactive 0
		226  602: 		 602: checking if request complete 1
		226  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		227  155: 		 155: sanitizing user input
		227  157: 		 157: checking mpi stages error state
		227  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		228  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		229  140: 		 140: freeing item, now at 4 items : arenas 1 pointer 0x6776f0
		229  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		230  185: 		 185: invalidating user MPI_Request handle: addr 0x67e6b8
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		231  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		232  568: 		 568: sanitizing user input
		232  571: 		 571: checking mpi stages error state
		232  574: 		 574: checking 0x67e6c0 == MPI_REQUEST_NULL 0
		232  583: 		 583: translated MPI_Request to Request_ptr: 0x677760
		232  587: 		 587: checking persistent 0 and inactive 0
		232  602: 		 602: checking if request complete 1
		232  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		233  155: 		 155: sanitizing user input
		233  157: 		 157: checking mpi stages error state
		233  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		234  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		235  140: 		 140: freeing item, now at 3 items : arenas 1 pointer 0x677760
		235  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		236  185: 		 185: invalidating user MPI_Request handle: addr 0x67e6c0
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		237  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		238  568: 		 568: sanitizing user input
		238  571: 		 571: checking mpi stages error state
		238  574: 		 574: checking 0x67e6c8 == MPI_REQUEST_NULL 0
		238  583: 		 583: translated MPI_Request to Request_ptr: 0x6777d0
		238  587: 		 587: checking persistent 0 and inactive 0
		238  602: 		 602: checking if request complete 1
		238  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		239  155: 		 155: sanitizing user input
		239  157: 		 157: checking mpi stages error state
		239  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		240  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		241  140: 		 140: freeing item, now at 2 items : arenas 1 pointer 0x6777d0
		241  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		242  185: 		 185: invalidating user MPI_Request handle: addr 0x67e6c8
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		243  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		244  568: 		 568: sanitizing user input
		244  571: 		 571: checking mpi stages error state
		244  574: 		 574: checking 0x67e6d0 == MPI_REQUEST_NULL 0
		244  583: 		 583: translated MPI_Request to Request_ptr: 0x677840
		244  587: 		 587: checking persistent 0 and inactive 0
		244  602: 		 602: checking if request complete 1
		244  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		245  155: 		 155: sanitizing user input
		245  157: 		 157: checking mpi stages error state
		245  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		246  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		247  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x677840
		247  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		248  185: 		 185: invalidating user MPI_Request handle: addr 0x67e6d0
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		249  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Barrier(MPI_Comm)]
		250  818: 		 818: checking mpi stages error state
	[virtual int exampi::BasicInterface::MPI_Comm_rank(MPI_Comm, int*)]
		251  724: 		 724: checking mpi stages error state
		251  732: 		 732: called MPI_Comm_rank: 0
	[virtual int exampi::BasicInterface::MPI_Comm_size(MPI_Comm, int*)]
		252  739: 		 739: checking mpi stages error state
		252  747: 		 747: called MPI_Comm_size: 8
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		253  274: 		 274: entry MPI_Send with buf 0x7fffffffc27c count 1 dest 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		254  253: 		 253: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		255  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		256  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		257  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		258   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		259  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		259  121: 		 121: free_list 0x677840
		259  124: 		 124: new free_list 0
		259  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		260  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		261  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		262  505: 		 505: checking mpi stages error state
		262  512: 		 512: translating request
		262  516: 		 516: persistent check
		262  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		263  129: 		 129: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		264  260: 		 260: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		265  568: 		 568: sanitizing user input
		265  571: 		 571: checking mpi stages error state
		265  574: 		 574: checking 0x7fffffffc168 == MPI_REQUEST_NULL 0
		265  583: 		 583: translated MPI_Request to Request_ptr: 0x677840
		265  587: 		 587: checking persistent 0 and inactive 0
		265  602: 		 602: checking if request complete 0
		265  605: 		 605: will wait for completion
		265  610: 		 610: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
	[void exampi::BlockingProgress::progress()]
		95  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		96  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		97  229: 		 229: envelope to send: e 0 c 0 s 0 d 1 t 0
		97  259: 		 259: sent 32 bytes
	[void exampi::Request::release()]
		98   31: 		  31: request lock acquired
		98   40: 		  40: notifying waiting thread
		98   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		99  167: 		 167: sent message

[thread  main]  [src/interfaces/interface.cc]
		265  618: 		 618: finished waiting
		265  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		266  155: 		 155: sanitizing user input
		266  157: 		 157: checking mpi stages error state
		266  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		267  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		268  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x677840
		268  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		269  185: 		 185: invalidating user MPI_Request handle: addr 0x7fffffffc168
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		270  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		271  303: 		 303: entry MPI_Recv with buf 0x7fffffffc27c count 1 src 7 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		272  253: 		 253: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		273  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		274  484: 		 484: sanitizing user input
		274  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		275  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		276   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		277  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		277  121: 		 121: free_list 0x677840
		277  124: 		 124: new free_list 0
		277  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		278  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		279  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		280  505: 		 505: checking mpi stages error state
		280  512: 		 512: translating request
		280  516: 		 516: persistent check
		280  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		281   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		282   97: 		  97: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		283  260: 		 260: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		284  568: 		 568: sanitizing user input
		284  571: 		 571: checking mpi stages error state
		284  574: 		 574: checking 0x7fffffffc188 == MPI_REQUEST_NULL 0
		284  583: 		 583: translated MPI_Request to Request_ptr: 0x677840
		284  587: 		 587: checking persistent 0 and inactive 0
		284  602: 		 602: checking if request complete 0
		284  605: 		 605: will wait for completion
		284  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		100  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		101  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		101  121: 		 121: free_list 0x67b610
		101  124: 		 124: new free_list 0x67b628
		101  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		100  143: 		 143: received header + size of size 28
		100  148: 		 148: header: e 0 c 0 s 7 d 0 t 0
		100  149: 		 149: payload length 4
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		101  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		101  121: 		 121: free_list 0x2aaaabb5b010
		101  124: 		 124: new free_list 0x2aaaabb6afd8
		101  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		100  177: 		 177: received payload of size 32
	[void exampi::BlockingProgress::progress()]
		99  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		100   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		101   59: 		  59: found requests and messages to match
		101   70: 		  70: picked up request: 0x677840
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		102   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 7 == 7, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		101   99: 		  99: found match, generating match object
		101  103: 		 103: header 0x67b610 == 0x677840
		101  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		102  155: 		 155: progress thread, matched header 0x67b610 == request 0x677840
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		103  194: 		 194: handling matched request <-> protocol message
		103  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		104  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		104  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		105  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		105  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		106   31: 		  31: request lock acquired
		106   40: 		  40: notifying waiting thread
		106   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		107  217: 		 217: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		284  618: 		 618: finished waiting
		284  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		285  155: 		 155: sanitizing user input
		285  157: 		 157: checking mpi stages error state
		285  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		286  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		287  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x677840
		287  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		288  185: 		 185: invalidating user MPI_Request handle: addr 0x7fffffffc188
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		289  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm)]
		290  274: 		 274: entry MPI_Send with buf 0x7fffffffc27c count 1 dest 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		291  253: 		 253: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		292  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		293  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		294  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		295   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		296  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		296  121: 		 121: free_list 0x677840
		296  124: 		 124: new free_list 0
		296  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		297  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		298  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		299  505: 		 505: checking mpi stages error state
		299  512: 		 512: translating request
		299  516: 		 516: persistent check
		299  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		300  129: 		 129: put *send request into outbox
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		301  260: 		 260: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		302  568: 		 568: sanitizing user input
		302  571: 		 571: checking mpi stages error state
		302  574: 		 574: checking 0x7fffffffc168 == MPI_REQUEST_NULL 0
		302  583: 		 583: translated MPI_Request to Request_ptr: 0x677840
		302  587: 		 587: checking persistent 0 and inactive 0
		302  602: 		 602: checking if request complete 0
		302  605: 		 605: will wait for completion
		302  610: 		 610: acquired lock on request

[thread undef] [src/engines/blockingprogress.cc]
	[void exampi::BlockingProgress::progress()]
		108  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		109  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		110  229: 		 229: envelope to send: e 0 c 0 s 0 d 1 t 0
		110  259: 		 259: sent 32 bytes
	[void exampi::Request::release()]
		111   31: 		  31: request lock acquired
		111   40: 		  40: notifying waiting thread
		111   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		112  167: 		 167: sent message

[thread  main]  [src/interfaces/interface.cc]
		302  618: 		 618: finished waiting
		302  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		303  155: 		 155: sanitizing user input
		303  157: 		 157: checking mpi stages error state
		303  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		304  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		305  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x677840
		305  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		306  185: 		 185: invalidating user MPI_Request handle: addr 0x7fffffffc168
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		307  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		308  303: 		 303: entry MPI_Recv with buf 0x7fffffffc27c count 1 src 7 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		309  253: 		 253: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		310  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		311  484: 		 484: sanitizing user input
		311  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		312  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		313   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		314  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		314  121: 		 121: free_list 0x677840
		314  124: 		 124: new free_list 0
		314  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		315  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		316  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		317  505: 		 505: checking mpi stages error state
		317  512: 		 512: translating request
		317  516: 		 516: persistent check
		317  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		318   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		319   97: 		  97: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		320  260: 		 260: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		321  568: 		 568: sanitizing user input
		321  571: 		 571: checking mpi stages error state
		321  574: 		 574: checking 0x7fffffffc188 == MPI_REQUEST_NULL 0
		321  583: 		 583: translated MPI_Request to Request_ptr: 0x677840
		321  587: 		 587: checking persistent 0 and inactive 0
		321  602: 		 602: checking if request complete 0
		321  605: 		 605: will wait for completion
		321  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		113  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		114  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		114  121: 		 121: free_list 0x67b610
		114  124: 		 124: new free_list 0x67b628
		114  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		113  143: 		 143: received header + size of size 28
		113  148: 		 148: header: e 0 c 0 s 7 d 0 t 0
		113  149: 		 149: payload length 4
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		114  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		114  121: 		 121: free_list 0x2aaaabb5b010
		114  124: 		 124: new free_list 0x2aaaabb6afd8
		114  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		113  177: 		 177: received payload of size 32
	[void exampi::BlockingProgress::progress()]
		112  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		113   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		114   59: 		  59: found requests and messages to match
		114   70: 		  70: picked up request: 0x677840
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		115   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 7 == 7, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		114   99: 		  99: found match, generating match object
		114  103: 		 103: header 0x67b610 == 0x677840
		114  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		115  155: 		 155: progress thread, matched header 0x67b610 == request 0x677840
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		116  194: 		 194: handling matched request <-> protocol message
		116  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		117  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		117  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		118  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		118  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		119   31: 		  31: request lock acquired
		119   40: 		  40: notifying waiting thread
		119   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		120  217: 		 217: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		321  618: 		 618: finished waiting
		321  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		322  155: 		 155: sanitizing user input
		322  157: 		 157: checking mpi stages error state
		322  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		323  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		324  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x677840
		324  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		325  185: 		 185: invalidating user MPI_Request handle: addr 0x7fffffffc188
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		326  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Barrier(MPI_Comm)]
		327  877: 		 877: End of MPI_Barrier
	[virtual int exampi::BasicInterface::MPI_Comm_rank(MPI_Comm, int*)]
		328  724: 		 724: checking mpi stages error state
		328  732: 		 732: called MPI_Comm_rank: 0
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		329  352: 		 352: entry MPI_Irend with buf 0x2aaaac605010 count 2883 src 4 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		330  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		331  484: 		 484: sanitizing user input
		331  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		332  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		333   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		334  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		334  121: 		 121: free_list 0x677840
		334  124: 		 124: new free_list 0
		334  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		335  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		336  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		337  505: 		 505: checking mpi stages error state
		337  512: 		 512: translating request
		337  516: 		 516: persistent check
		337  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		338   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		339   97: 		  97: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		340  352: 		 352: entry MPI_Irend with buf 0x2aaaac60ab90 count 2883 src 2 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		341  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		342  484: 		 484: sanitizing user input
		342  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		343  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		344   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		345  102: 		 102: allocating N6exampi7RequestE from 1 arenas
		345  109: 		 109: allocating additional arena
		345  121: 		 121: free_list 0x77a430
		345  124: 		 124: new free_list 0x77a4a0
		345  132: 		 132: item is number 2
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		346  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		347  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		348  505: 		 505: checking mpi stages error state
		348  512: 		 512: translating request
		348  516: 		 516: persistent check
		348  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		349   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		350   97: 		  97: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		351  352: 		 352: entry MPI_Irend with buf 0x2aaaac610710 count 2883 src 1 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		352  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		353  484: 		 484: sanitizing user input
		353  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		354  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		355   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		356  102: 		 102: allocating N6exampi7RequestE from 2 arenas
		356  121: 		 121: free_list 0x77a4a0
		356  124: 		 124: new free_list 0x77a510
		356  132: 		 132: item is number 3
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		357  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		358  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		359  505: 		 505: checking mpi stages error state
		359  512: 		 512: translating request
		359  516: 		 516: persistent check
		359  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		360   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		361   97: 		  97: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		362  352: 		 352: entry MPI_Irend with buf 0x2aaaac616290 count 93 src 3 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		363  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		364  484: 		 484: sanitizing user input
		364  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		365  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		366   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		367  102: 		 102: allocating N6exampi7RequestE from 2 arenas
		367  121: 		 121: free_list 0x77a510
		367  124: 		 124: new free_list 0x77a580
		367  132: 		 132: item is number 4
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		368  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		369  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		370  505: 		 505: checking mpi stages error state
		370  512: 		 512: translating request
		370  516: 		 516: persistent check
		370  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		371   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		372   97: 		  97: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		373  352: 		 352: entry MPI_Irend with buf 0x2aaaac616590 count 93 src 6 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		374  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		375  484: 		 484: sanitizing user input
		375  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		376  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		377   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		378  102: 		 102: allocating N6exampi7RequestE from 2 arenas
		378  121: 		 121: free_list 0x77a580
		378  124: 		 124: new free_list 0x77a5f0
		378  132: 		 132: item is number 5
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		379  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		380  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		381  505: 		 505: checking mpi stages error state
		381  512: 		 512: translating request
		381  516: 		 516: persistent check
		381  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		382   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		383   97: 		  97: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		384  352: 		 352: entry MPI_Irend with buf 0x2aaaac616890 count 93 src 5 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		385  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		386  484: 		 484: sanitizing user input
		386  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		387  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		388   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		389  102: 		 102: allocating N6exampi7RequestE from 2 arenas
		389  121: 		 121: free_list 0x77a5f0
		389  124: 		 124: new free_list 0x77a660
		389  132: 		 132: item is number 6
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		390  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		391  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		392  505: 		 505: checking mpi stages error state
		392  512: 		 512: translating request
		392  516: 		 516: persistent check
		392  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		393   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		394   97: 		  97: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		395  352: 		 352: entry MPI_Irend with buf 0x2aaaac616b90 count 3 src 7 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		396  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		397  484: 		 484: sanitizing user input
		397  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		398  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		399   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		400  102: 		 102: allocating N6exampi7RequestE from 2 arenas
		400  121: 		 121: free_list 0x77a660
		400  124: 		 124: new free_list 0x77a6d0
		400  132: 		 132: item is number 7
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		401  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		402  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		403  505: 		 505: checking mpi stages error state
		403  512: 		 512: translating request
		403  516: 		 516: persistent check
		403  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		404   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		405   97: 		  97: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Comm_rank(MPI_Comm, int*)]
		406  724: 		 724: checking mpi stages error state
		406  732: 		 732: called MPI_Comm_rank: 0

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		121  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		122  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		122  121: 		 121: free_list 0x67b610
		122  124: 		 124: new free_list 0x67b628
		122  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		121  143: 		 143: received header + size of size 28
		121  148: 		 148: header: e 0 c 0 s 4 d 0 t 1024
		121  149: 		 149: payload length 23064
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		122  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		122  121: 		 121: free_list 0x2aaaabb5b010
		122  124: 		 124: new free_list 0x2aaaabb6afd8

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		407  326: 		 326: entry MPI_Isend with buf 0x2aaaac5e1010 count 2883 dest 4 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		408  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		409  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		410  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		411   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		412  102: 		 102: allocating N6exampi7RequestE from 2 arenas
		412  121: 		 121: free_list 0x77a6d0
		412  124: 		 124: new free_list 0x77a740
		412  132: 		 132: item is number 8
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		413  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		414  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		415  505: 		 505: checking mpi stages error state
		415  512: 		 512: translating request
		415  516: 		 516: persistent check
		415  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		416  129: 		 129: put *send request into outbox

[thread undef] [include/pool.h]
		122  132: 		 132: item is number 1

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		417  326: 		 326: entry MPI_Isend with buf 0x2aaaac5e6b90 count 2883 dest 2 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		418  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		419  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		420  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		421   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		422  102: 		 102: allocating N6exampi7RequestE from 2 arenas
		422  121: 		 121: free_list 0x77a740
		422  124: 		 124: new free_list 0x77a7b0
		422  132: 		 132: item is number 9
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		423  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		424  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		425  505: 		 505: checking mpi stages error state
		425  512: 		 512: translating request
		425  516: 		 516: persistent check
		425  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		426  129: 		 129: put *send request into outbox

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		121  177: 		 177: received payload of size 23092
	[void exampi::BlockingProgress::progress()]
		122  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		123   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		124   59: 		  59: found requests and messages to match
		124   70: 		  70: picked up request: 0x677840
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		125   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 4 == 4, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		124   99: 		  99: found match, generating match object
		124  103: 		 103: header 0x67b610 == 0x677840
		124  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		125  155: 		 155: progress thread, matched header 0x67b610 == request 0x677840
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		126  194: 		 194: handling matched request <-> protocol message
		126  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		127  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		127  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		128  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		128  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		129   31: 		  31: request lock acquired
		129   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		130  217: 		 217: request completed and released
	[void exampi::BlockingProgress::progress()]
		131  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		132  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		133  229: 		 229: envelope to send: e 0 c 0 s 0 d 4 t 1024

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		427  326: 		 326: entry MPI_Isend with buf 0x2aaaac5ec710 count 2883 dest 1 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		428  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		429  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		430  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		431   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		432  102: 		 102: allocating N6exampi7RequestE from 2 arenas
		432  121: 		 121: free_list 0x77a7b0
		432  124: 		 124: new free_list 0x77a820
		432  132: 		 132: item is number 10
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		433  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		434  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		435  505: 		 505: checking mpi stages error state
		435  512: 		 512: translating request
		435  516: 		 516: persistent check
		435  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		436  129: 		 129: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		437  326: 		 326: entry MPI_Isend with buf 0x2aaaac5f2290 count 93 dest 3 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		438  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		439  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		440  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		441   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		442  102: 		 102: allocating N6exampi7RequestE from 2 arenas
		442  121: 		 121: free_list 0x77a820
		442  124: 		 124: new free_list 0x77a890
		442  132: 		 132: item is number 11
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		443  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		444  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		445  505: 		 505: checking mpi stages error state
		445  512: 		 512: translating request
		445  516: 		 516: persistent check
		445  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		446  129: 		 129: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		447  326: 		 326: entry MPI_Isend with buf 0x2aaaac5f2590 count 93 dest 6 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		448  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		449  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		450  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		451   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		452  102: 		 102: allocating N6exampi7RequestE from 2 arenas
		452  121: 		 121: free_list 0x77a890
		452  124: 		 124: new free_list 0x77a900
		452  132: 		 132: item is number 12
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		453  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		454  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		455  505: 		 505: checking mpi stages error state
		455  512: 		 512: translating request
		455  516: 		 516: persistent check
		455  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		456  129: 		 129: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		457  326: 		 326: entry MPI_Isend with buf 0x2aaaac5f2890 count 93 dest 5 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		458  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		459  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		460  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		461   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		462  102: 		 102: allocating N6exampi7RequestE from 2 arenas
		462  121: 		 121: free_list 0x77a900
		462  124: 		 124: new free_list 0x77a970
		462  132: 		 132: item is number 13
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		463  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		464  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		465  505: 		 505: checking mpi stages error state
		465  512: 		 512: translating request
		465  516: 		 516: persistent check
		465  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		466  129: 		 129: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		467  326: 		 326: entry MPI_Isend with buf 0x2aaaac5f2b90 count 3 dest 7 tag 1024
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		468  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		469  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		470  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		471   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		472  102: 		 102: allocating N6exampi7RequestE from 2 arenas
		472  121: 		 121: free_list 0x77a970
		472  124: 		 124: new free_list 0x77a9e0
		472  132: 		 132: item is number 14
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		473  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		474  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		475  505: 		 505: checking mpi stages error state
		475  512: 		 512: translating request
		475  516: 		 516: persistent check
		475  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		476  129: 		 129: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Waitall(int, MPI_Request*, MPI_Status*)]
		477  634: 		 634: checking mpi stages error state
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		478  568: 		 568: sanitizing user input
		478  571: 		 571: checking mpi stages error state
		478  574: 		 574: checking 0x67e770 == MPI_REQUEST_NULL 0
		478  583: 		 583: translated MPI_Request to Request_ptr: 0x77a6d0
		478  587: 		 587: checking persistent 0 and inactive 0
		478  602: 		 602: checking if request complete 0
		478  605: 		 605: will wait for completion
		478  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
		133  259: 		 259: sent 23092 bytes
	[void exampi::Request::release()]
		134   31: 		  31: request lock acquired
		134   40: 		  40: notifying waiting thread
		134   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		135  167: 		 167: sent message
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		136  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		137  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		137  121: 		 121: free_list 0x67b610
		137  124: 		 124: new free_list 0x67b628
		137  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		136  143: 		 143: received header + size of size 28
		136  148: 		 148: header: e 0 c 0 s 3 d 0 t 1024
		136  149: 		 149: payload length 744
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		137  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		137  121: 		 121: free_list 0x2aaaabb5b010
		137  124: 		 124: new free_list 0x2aaaabb6afd8
		137  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		136  177: 		 177: received payload of size 772
	[void exampi::BlockingProgress::progress()]
		135  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		136   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		137   59: 		  59: found requests and messages to match
		137   70: 		  70: picked up request: 0x77a430
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		138   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 3, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		137  117: 		 117: no match with request
		137   70: 		  70: picked up request: 0x77a4a0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		138   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 3, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		137  117: 		 117: no match with request
		137   70: 		  70: picked up request: 0x77a510
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		138   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 3 == 3, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		137   99: 		  99: found match, generating match object
		137  103: 		 103: header 0x67b610 == 0x77a510
		137  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		138  155: 		 155: progress thread, matched header 0x67b610 == request 0x77a510
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		139  194: 		 194: handling matched request <-> protocol message
		139  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		140  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		140  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		141  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		141  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		142   31: 		  31: request lock acquired
		142   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		143  217: 		 217: request completed and released
	[void exampi::BlockingProgress::progress()]
		144  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		145  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		146  229: 		 229: envelope to send: e 0 c 0 s 0 d 2 t 1024

[thread  main]  [src/interfaces/interface.cc]
		478  618: 		 618: finished waiting

[thread undef] [src/transports/udptransport.cc]
		146  259: 		 259: sent 23092 bytes
	[void exampi::Request::release()]
		147   31: 		  31: request lock acquired
		147   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		148  167: 		 167: sent message
		148  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		149  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		150  229: 		 229: envelope to send: e 0 c 0 s 0 d 1 t 1024

[thread  main]  [src/interfaces/interface.cc]
		478  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		479  155: 		 155: sanitizing user input
		479  157: 		 157: checking mpi stages error state
		479  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		480  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		481  140: 		 140: freeing item, now at 14 items : arenas 2 pointer 0x77a6d0
		481  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		482  185: 		 185: invalidating user MPI_Request handle: addr 0x67e770
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		483  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		484  568: 		 568: sanitizing user input
		484  571: 		 571: checking mpi stages error state
		484  574: 		 574: checking 0x67e778 == MPI_REQUEST_NULL 0
		484  583: 		 583: translated MPI_Request to Request_ptr: 0x77a740
		484  587: 		 587: checking persistent 0 and inactive 0
		484  602: 		 602: checking if request complete 1
		484  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		485  155: 		 155: sanitizing user input
		485  157: 		 157: checking mpi stages error state
		485  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		486  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		487  140: 		 140: freeing item, now at 13 items : arenas 2 pointer 0x77a740
		487  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		488  185: 		 185: invalidating user MPI_Request handle: addr 0x67e778
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		489  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		490  568: 		 568: sanitizing user input
		490  571: 		 571: checking mpi stages error state
		490  574: 		 574: checking 0x67e780 == MPI_REQUEST_NULL 0
		490  583: 		 583: translated MPI_Request to Request_ptr: 0x77a7b0
		490  587: 		 587: checking persistent 0 and inactive 0
		490  602: 		 602: checking if request complete 0
		490  605: 		 605: will wait for completion
		490  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
		150  259: 		 259: sent 23092 bytes
	[void exampi::Request::release()]
		151   31: 		  31: request lock acquired
		151   40: 		  40: notifying waiting thread
		151   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		152  167: 		 167: sent message
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		153  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		154  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		154  121: 		 121: free_list 0x67b610
		154  124: 		 124: new free_list 0x67b628
		154  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		153  143: 		 143: received header + size of size 28
		153  148: 		 148: header: e 0 c 0 s 7 d 0 t 1024
		153  149: 		 149: payload length 24
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		154  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		154  121: 		 121: free_list 0x2aaaabb5b010
		154  124: 		 124: new free_list 0x2aaaabb6afd8
		154  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		153  177: 		 177: received payload of size 52
	[void exampi::BlockingProgress::progress()]
		152  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		153   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		154   59: 		  59: found requests and messages to match
		154   70: 		  70: picked up request: 0x77a430
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		155   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 7, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		154  117: 		 117: no match with request
		154   70: 		  70: picked up request: 0x77a4a0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		155   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 7, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		154  117: 		 117: no match with request
		154   70: 		  70: picked up request: 0x77a580
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		155   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 6 == 7, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		154  117: 		 117: no match with request
		154   70: 		  70: picked up request: 0x77a5f0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		155   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 5 == 7, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		154  117: 		 117: no match with request
		154   70: 		  70: picked up request: 0x77a660
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		155   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 7 == 7, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		154   99: 		  99: found match, generating match object
		154  103: 		 103: header 0x67b610 == 0x77a660
		154  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		155  155: 		 155: progress thread, matched header 0x67b610 == request 0x77a660
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		156  194: 		 194: handling matched request <-> protocol message
		156  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		157  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		157  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		158  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		158  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		159   31: 		  31: request lock acquired
		159   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		160  217: 		 217: request completed and released
	[void exampi::BlockingProgress::progress()]
		161  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		162  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		163  229: 		 229: envelope to send: e 0 c 0 s 0 d 3 t 1024

[thread  main]  [src/interfaces/interface.cc]
		490  618: 		 618: finished waiting
		490  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		491  155: 		 155: sanitizing user input
		491  157: 		 157: checking mpi stages error state
		491  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		492  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		493  140: 		 140: freeing item, now at 12 items : arenas 2 pointer 0x77a7b0
		493  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		494  185: 		 185: invalidating user MPI_Request handle: addr 0x67e780
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		495  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		496  568: 		 568: sanitizing user input
		496  571: 		 571: checking mpi stages error state
		496  574: 		 574: checking 0x67e788 == MPI_REQUEST_NULL 0
		496  583: 		 583: translated MPI_Request to Request_ptr: 0x77a820
		496  587: 		 587: checking persistent 0 and inactive 0
		496  602: 		 602: checking if request complete 0
		496  605: 		 605: will wait for completion
		496  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
		163  259: 		 259: sent 772 bytes
	[void exampi::Request::release()]
		164   31: 		  31: request lock acquired
		164   40: 		  40: notifying waiting thread
		164   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		165  167: 		 167: sent message
		165  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		166  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		167  229: 		 229: envelope to send: e 0 c 0 s 0 d 6 t 1024

[thread  main]  [src/interfaces/interface.cc]
		496  618: 		 618: finished waiting
		496  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		497  155: 		 155: sanitizing user input
		497  157: 		 157: checking mpi stages error state
		497  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		498  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		499  140: 		 140: freeing item, now at 11 items : arenas 2 pointer 0x77a820
		499  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		500  185: 		 185: invalidating user MPI_Request handle: addr 0x67e788
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		501  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		502  568: 		 568: sanitizing user input
		502  571: 		 571: checking mpi stages error state
		502  574: 		 574: checking 0x67e790 == MPI_REQUEST_NULL 0
		502  583: 		 583: translated MPI_Request to Request_ptr: 0x77a890
		502  587: 		 587: checking persistent 0 and inactive 0
		502  602: 		 602: checking if request complete 0
		502  605: 		 605: will wait for completion
		502  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
		167  259: 		 259: sent 772 bytes
	[void exampi::Request::release()]
		168   31: 		  31: request lock acquired
		168   40: 		  40: notifying waiting thread
		168   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		169  167: 		 167: sent message
		169  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		170  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		171  229: 		 229: envelope to send: e 0 c 0 s 0 d 5 t 1024

[thread  main]  [src/interfaces/interface.cc]
		502  618: 		 618: finished waiting
		502  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		503  155: 		 155: sanitizing user input
		503  157: 		 157: checking mpi stages error state
		503  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		504  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		505  140: 		 140: freeing item, now at 10 items : arenas 2 pointer 0x77a890
		505  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		506  185: 		 185: invalidating user MPI_Request handle: addr 0x67e790
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		507  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		508  568: 		 568: sanitizing user input
		508  571: 		 571: checking mpi stages error state
		508  574: 		 574: checking 0x67e798 == MPI_REQUEST_NULL 0
		508  583: 		 583: translated MPI_Request to Request_ptr: 0x77a900
		508  587: 		 587: checking persistent 0 and inactive 0
		508  602: 		 602: checking if request complete 0
		508  605: 		 605: will wait for completion
		508  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
		171  259: 		 259: sent 772 bytes
	[void exampi::Request::release()]
		172   31: 		  31: request lock acquired
		172   40: 		  40: notifying waiting thread
		172   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		173  167: 		 167: sent message
		173  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		174  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		175  229: 		 229: envelope to send: e 0 c 0 s 0 d 7 t 1024

[thread  main]  [src/interfaces/interface.cc]
		508  618: 		 618: finished waiting
		508  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		509  155: 		 155: sanitizing user input
		509  157: 		 157: checking mpi stages error state
		509  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		510  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		511  140: 		 140: freeing item, now at 9 items : arenas 2 pointer 0x77a900
		511  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		512  185: 		 185: invalidating user MPI_Request handle: addr 0x67e798
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		513  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		514  568: 		 568: sanitizing user input
		514  571: 		 571: checking mpi stages error state
		514  574: 		 574: checking 0x67e7a0 == MPI_REQUEST_NULL 0
		514  583: 		 583: translated MPI_Request to Request_ptr: 0x77a970
		514  587: 		 587: checking persistent 0 and inactive 0
		514  602: 		 602: checking if request complete 0
		514  605: 		 605: will wait for completion
		514  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
		175  259: 		 259: sent 52 bytes
	[void exampi::Request::release()]
		176   31: 		  31: request lock acquired
		176   40: 		  40: notifying waiting thread
		176   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		177  167: 		 167: sent message
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		178  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		179  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		179  121: 		 121: free_list 0x67b610
		179  124: 		 124: new free_list 0x67b628
		179  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		178  143: 		 143: received header + size of size 28
		178  148: 		 148: header: e 0 c 0 s 6 d 0 t 1024
		178  149: 		 149: payload length 744
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		179  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		179  121: 		 121: free_list 0x2aaaabb5b010
		179  124: 		 124: new free_list 0x2aaaabb6afd8
		179  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		178  177: 		 177: received payload of size 772
	[void exampi::BlockingProgress::progress()]
		177  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		178   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		179   59: 		  59: found requests and messages to match
		179   70: 		  70: picked up request: 0x77a430
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		180   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 6, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		179  117: 		 117: no match with request
		179   70: 		  70: picked up request: 0x77a4a0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		180   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 6, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		179  117: 		 117: no match with request
		179   70: 		  70: picked up request: 0x77a580
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		180   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 6 == 6, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		179   99: 		  99: found match, generating match object
		179  103: 		 103: header 0x67b610 == 0x77a580
		179  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		180  155: 		 155: progress thread, matched header 0x67b610 == request 0x77a580
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		181  194: 		 194: handling matched request <-> protocol message
		181  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		182  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		182  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		183  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		183  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		184   31: 		  31: request lock acquired
		184   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		185  217: 		 217: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		514  618: 		 618: finished waiting
		514  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		515  155: 		 155: sanitizing user input
		515  157: 		 157: checking mpi stages error state
		515  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		516  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		517  140: 		 140: freeing item, now at 8 items : arenas 2 pointer 0x77a970
		517  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		518  185: 		 185: invalidating user MPI_Request handle: addr 0x67e7a0
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		519  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Comm_rank(MPI_Comm, int*)]
		520  724: 		 724: checking mpi stages error state
		520  732: 		 732: called MPI_Comm_rank: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		521  568: 		 568: sanitizing user input
		521  571: 		 571: checking mpi stages error state
		521  574: 		 574: checking 0x67e6a0 == MPI_REQUEST_NULL 0
		521  583: 		 583: translated MPI_Request to Request_ptr: 0x677840
		521  587: 		 587: checking persistent 0 and inactive 0
		521  602: 		 602: checking if request complete 1
		521  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		522  155: 		 155: sanitizing user input
		522  157: 		 157: checking mpi stages error state
		522  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		523  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		524  140: 		 140: freeing item, now at 7 items : arenas 2 pointer 0x677840
		524  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		525  185: 		 185: invalidating user MPI_Request handle: addr 0x67e6a0
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		526  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		527  568: 		 568: sanitizing user input
		527  571: 		 571: checking mpi stages error state
		527  574: 		 574: checking 0x67e6a8 == MPI_REQUEST_NULL 0
		527  583: 		 583: translated MPI_Request to Request_ptr: 0x77a430
		527  587: 		 587: checking persistent 0 and inactive 0
		527  602: 		 602: checking if request complete 0
		527  605: 		 605: will wait for completion
		527  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		186  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		187  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		187  121: 		 121: free_list 0x67b610
		187  124: 		 124: new free_list 0x67b628
		187  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		186  143: 		 143: received header + size of size 28
		186  148: 		 148: header: e 0 c 0 s 5 d 0 t 1024
		186  149: 		 149: payload length 744
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		187  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		187  121: 		 121: free_list 0x2aaaabb5b010
		187  124: 		 124: new free_list 0x2aaaabb6afd8
		187  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		186  177: 		 177: received payload of size 772
	[void exampi::BlockingProgress::progress()]
		187  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		188   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		189   59: 		  59: found requests and messages to match
		189   70: 		  70: picked up request: 0x77a430
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		190   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 5, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		189  117: 		 117: no match with request
		189   70: 		  70: picked up request: 0x77a4a0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		190   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 5, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		189  117: 		 117: no match with request
		189   70: 		  70: picked up request: 0x77a5f0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		190   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 5 == 5, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		189   99: 		  99: found match, generating match object
		189  103: 		 103: header 0x67b610 == 0x77a5f0
		189  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		190  155: 		 155: progress thread, matched header 0x67b610 == request 0x77a5f0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		191  194: 		 194: handling matched request <-> protocol message
		191  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		192  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		192  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		193  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		193  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		194   31: 		  31: request lock acquired
		194   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		195  217: 		 217: request completed and released
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		196  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		197  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		197  121: 		 121: free_list 0x67b610
		197  124: 		 124: new free_list 0x67b628
		197  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		196  143: 		 143: received header + size of size 28
		196  148: 		 148: header: e 0 c 0 s 1 d 0 t 1024
		196  149: 		 149: payload length 23064
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		197  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		197  121: 		 121: free_list 0x2aaaabb5b010
		197  124: 		 124: new free_list 0x2aaaabb6afd8
		197  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		196  177: 		 177: received payload of size 23092
	[void exampi::BlockingProgress::progress()]
		197  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		198   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		199   59: 		  59: found requests and messages to match
		199   70: 		  70: picked up request: 0x77a430
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		200   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 1, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		199  117: 		 117: no match with request
		199   70: 		  70: picked up request: 0x77a4a0
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		200   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 1, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		199   99: 		  99: found match, generating match object
		199  103: 		 103: header 0x67b610 == 0x77a4a0
		199  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		200  155: 		 155: progress thread, matched header 0x67b610 == request 0x77a4a0
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		201  194: 		 194: handling matched request <-> protocol message
		201  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		202  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		202  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		203  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		203  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		204   31: 		  31: request lock acquired
		204   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		205  217: 		 217: request completed and released
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		206  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		207  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		207  121: 		 121: free_list 0x67b610
		207  124: 		 124: new free_list 0x67b628
		207  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		206  143: 		 143: received header + size of size 28
		206  148: 		 148: header: e 0 c 0 s 2 d 0 t 1024
		206  149: 		 149: payload length 23064
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		207  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		207  121: 		 121: free_list 0x2aaaabb5b010
		207  124: 		 124: new free_list 0x2aaaabb6afd8
		207  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		206  177: 		 177: received payload of size 23092
	[void exampi::BlockingProgress::progress()]
		207  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		208   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		209   59: 		  59: found requests and messages to match
		209   70: 		  70: picked up request: 0x77a430
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		210   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 2, dest 0 == 0, tag 1024 == 1024
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		209   99: 		  99: found match, generating match object
		209  103: 		 103: header 0x67b610 == 0x77a430
		209  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		210  155: 		 155: progress thread, matched header 0x67b610 == request 0x77a430
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		211  194: 		 194: handling matched request <-> protocol message
		211  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		212  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		212  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		213  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		213  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		214   31: 		  31: request lock acquired
		214   40: 		  40: notifying waiting thread
		214   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		215  217: 		 217: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		527  618: 		 618: finished waiting
		527  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		528  155: 		 155: sanitizing user input
		528  157: 		 157: checking mpi stages error state
		528  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		529  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		530  140: 		 140: freeing item, now at 6 items : arenas 2 pointer 0x77a430
		530  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		531  185: 		 185: invalidating user MPI_Request handle: addr 0x67e6a8
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		532  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		533  568: 		 568: sanitizing user input
		533  571: 		 571: checking mpi stages error state
		533  574: 		 574: checking 0x67e6b0 == MPI_REQUEST_NULL 0
		533  583: 		 583: translated MPI_Request to Request_ptr: 0x77a4a0
		533  587: 		 587: checking persistent 0 and inactive 0
		533  602: 		 602: checking if request complete 1
		533  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		534  155: 		 155: sanitizing user input
		534  157: 		 157: checking mpi stages error state
		534  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		535  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		536  140: 		 140: freeing item, now at 5 items : arenas 2 pointer 0x77a4a0
		536  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		537  185: 		 185: invalidating user MPI_Request handle: addr 0x67e6b0
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		538  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		539  568: 		 568: sanitizing user input
		539  571: 		 571: checking mpi stages error state
		539  574: 		 574: checking 0x67e6b8 == MPI_REQUEST_NULL 0
		539  583: 		 583: translated MPI_Request to Request_ptr: 0x77a510
		539  587: 		 587: checking persistent 0 and inactive 0
		539  602: 		 602: checking if request complete 1
		539  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		540  155: 		 155: sanitizing user input
		540  157: 		 157: checking mpi stages error state
		540  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		541  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		542  140: 		 140: freeing item, now at 4 items : arenas 2 pointer 0x77a510
		542  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		543  185: 		 185: invalidating user MPI_Request handle: addr 0x67e6b8
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		544  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		545  568: 		 568: sanitizing user input
		545  571: 		 571: checking mpi stages error state
		545  574: 		 574: checking 0x67e6c0 == MPI_REQUEST_NULL 0
		545  583: 		 583: translated MPI_Request to Request_ptr: 0x77a580
		545  587: 		 587: checking persistent 0 and inactive 0
		545  602: 		 602: checking if request complete 1
		545  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		546  155: 		 155: sanitizing user input
		546  157: 		 157: checking mpi stages error state
		546  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		547  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		548  140: 		 140: freeing item, now at 3 items : arenas 2 pointer 0x77a580
		548  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		549  185: 		 185: invalidating user MPI_Request handle: addr 0x67e6c0
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		550  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		551  568: 		 568: sanitizing user input
		551  571: 		 571: checking mpi stages error state
		551  574: 		 574: checking 0x67e6c8 == MPI_REQUEST_NULL 0
		551  583: 		 583: translated MPI_Request to Request_ptr: 0x77a5f0
		551  587: 		 587: checking persistent 0 and inactive 0
		551  602: 		 602: checking if request complete 1
		551  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		552  155: 		 155: sanitizing user input
		552  157: 		 157: checking mpi stages error state
		552  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		553  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		554  140: 		 140: freeing item, now at 2 items : arenas 2 pointer 0x77a5f0
		554  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		555  185: 		 185: invalidating user MPI_Request handle: addr 0x67e6c8
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		556  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		557  568: 		 568: sanitizing user input
		557  571: 		 571: checking mpi stages error state
		557  574: 		 574: checking 0x67e6d0 == MPI_REQUEST_NULL 0
		557  583: 		 583: translated MPI_Request to Request_ptr: 0x77a660
		557  587: 		 587: checking persistent 0 and inactive 0
		557  602: 		 602: checking if request complete 1
		557  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		558  155: 		 155: sanitizing user input
		558  157: 		 157: checking mpi stages error state
		558  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		559  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		560  140: 		 140: freeing item, now at 1 items : arenas 2 pointer 0x77a660
		560  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		561  185: 		 185: invalidating user MPI_Request handle: addr 0x67e6d0
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		562  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Comm_rank(MPI_Comm, int*)]
		563  724: 		 724: checking mpi stages error state
		563  732: 		 732: called MPI_Comm_rank: 0
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		564  352: 		 352: entry MPI_Irend with buf 0x2aaaac605010 count 2700 src 4 tag 3072
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		565  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		566  484: 		 484: sanitizing user input
		566  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		567  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		568   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		569  102: 		 102: allocating N6exampi7RequestE from 2 arenas
		569  121: 		 121: free_list 0x77a660
		569  124: 		 124: new free_list 0
		569  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		570  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		571  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		572  505: 		 505: checking mpi stages error state
		572  512: 		 512: translating request
		572  516: 		 516: persistent check
		572  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		573   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		574   97: 		  97: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		575  352: 		 352: entry MPI_Irend with buf 0x2aaaac60ab90 count 2700 src 2 tag 3072
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		576  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		577  484: 		 484: sanitizing user input
		577  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		578  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		579   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		580  102: 		 102: allocating N6exampi7RequestE from 2 arenas
		580  109: 		 109: allocating additional arena
		580  121: 		 121: free_list 0x9b4f90
		580  124: 		 124: new free_list 0x9b5000
		580  132: 		 132: item is number 2
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		581  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		582  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		583  505: 		 505: checking mpi stages error state
		583  512: 		 512: translating request
		583  516: 		 516: persistent check
		583  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		584   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		585   97: 		  97: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		586  352: 		 352: entry MPI_Irend with buf 0x2aaaac610710 count 2700 src 1 tag 3072
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		587  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		588  484: 		 484: sanitizing user input
		588  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		589  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		590   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		591  102: 		 102: allocating N6exampi7RequestE from 3 arenas
		591  121: 		 121: free_list 0x9b5000
		591  124: 		 124: new free_list 0x9b5070
		591  132: 		 132: item is number 3
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		592  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		593  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		594  505: 		 505: checking mpi stages error state
		594  512: 		 512: translating request
		594  516: 		 516: persistent check
		594  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		595   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		596   97: 		  97: handed request Receive to matcher
	[virtual int exampi::BasicInterface::MPI_Comm_rank(MPI_Comm, int*)]
		597  724: 		 724: checking mpi stages error state
		597  732: 		 732: called MPI_Comm_rank: 0
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		598  326: 		 326: entry MPI_Isend with buf 0x2aaaac5e1010 count 2700 dest 4 tag 3072
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		599  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		600  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		601  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		602   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		603  102: 		 102: allocating N6exampi7RequestE from 3 arenas
		603  121: 		 121: free_list 0x9b5070
		603  124: 		 124: new free_list 0x9b50e0
		603  132: 		 132: item is number 4
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		604  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		605  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		606  505: 		 505: checking mpi stages error state
		606  512: 		 512: translating request
		606  516: 		 516: persistent check
		606  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		607  129: 		 129: put *send request into outbox

[thread undef] [src/engines/blockingprogress.cc]
	[void exampi::BlockingProgress::progress()]
		216  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		217  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		218  229: 		 229: envelope to send: e 0 c 0 s 0 d 4 t 3072

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		608  326: 		 326: entry MPI_Isend with buf 0x2aaaac5e6b90 count 2700 dest 2 tag 3072
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		609  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		610  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		611  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		612   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		613  102: 		 102: allocating N6exampi7RequestE from 3 arenas
		613  121: 		 121: free_list 0x9b50e0
		613  124: 		 124: new free_list 0x9b5150
		613  132: 		 132: item is number 5
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		614  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		615  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		616  505: 		 505: checking mpi stages error state
		616  512: 		 512: translating request
		616  516: 		 516: persistent check
		616  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		617  129: 		 129: put *send request into outbox

[thread undef] [src/transports/udptransport.cc]
		218  259: 		 259: sent 21628 bytes
	[void exampi::Request::release()]
		219   31: 		  31: request lock acquired

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		618  326: 		 326: entry MPI_Isend with buf 0x2aaaac5ec710 count 2700 dest 1 tag 3072
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		619  200: 		 200: MPI_Send_init
	[virtual int exampi::BasicInterface::MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		620  418: 		 418: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		621  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		622   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		623  102: 		 102: allocating N6exampi7RequestE from 3 arenas
		623  121: 		 121: free_list 0x9b5150
		623  124: 		 124: new free_list 0x9b51c0
		623  132: 		 132: item is number 6
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		624  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		625  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		626  505: 		 505: checking mpi stages error state
		626  512: 		 512: translating request
		626  516: 		 516: persistent check
		626  523: 		 523: posting request to progress
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		627  129: 		 129: put *send request into outbox
	[virtual int exampi::BasicInterface::MPI_Waitall(int, MPI_Request*, MPI_Status*)]
		628  634: 		 634: checking mpi stages error state
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		629  568: 		 568: sanitizing user input
		629  571: 		 571: checking mpi stages error state
		629  574: 		 574: checking 0x67e770 == MPI_REQUEST_NULL 0
		629  583: 		 583: translated MPI_Request to Request_ptr: 0x9b5070
		629  587: 		 587: checking persistent 0 and inactive 0
		629  602: 		 602: checking if request complete 1
		629  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		630  155: 		 155: sanitizing user input
		630  157: 		 157: checking mpi stages error state

[thread undef] [src/request.cc]
		219   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		220  167: 		 167: sent message
		220  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		221  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		222  229: 		 229: envelope to send: e 0 c 0 s 0 d 2 t 3072

[thread  main]  [src/interfaces/interface.cc]
		630  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		631  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		632  140: 		 140: freeing item, now at 6 items : arenas 3 pointer 0x9b5070
		632  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		633  185: 		 185: invalidating user MPI_Request handle: addr 0x67e770
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		634  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		635  568: 		 568: sanitizing user input
		635  571: 		 571: checking mpi stages error state
		635  574: 		 574: checking 0x67e778 == MPI_REQUEST_NULL 0
		635  583: 		 583: translated MPI_Request to Request_ptr: 0x9b50e0
		635  587: 		 587: checking persistent 0 and inactive 0
		635  602: 		 602: checking if request complete 0
		635  605: 		 605: will wait for completion
		635  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
		222  259: 		 259: sent 21628 bytes
	[void exampi::Request::release()]
		223   31: 		  31: request lock acquired
		223   40: 		  40: notifying waiting thread
		223   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		224  167: 		 167: sent message
		224  163: 		 163: progress thread, handling request
	[void exampi::BlockingProgress::handle_request()]
		225  240: 		 240: fetching request
	[virtual void exampi::UDPTransport::reliable_send(exampi::Protocol, const exampi::Request*)]
		226  229: 		 229: envelope to send: e 0 c 0 s 0 d 1 t 3072

[thread  main]  [src/interfaces/interface.cc]
		635  618: 		 618: finished waiting

[thread undef] [src/transports/udptransport.cc]
		226  259: 		 259: sent 21628 bytes
	[void exampi::Request::release()]
		227   31: 		  31: request lock acquired
		227   45: 		  45: released request entirely
	[void exampi::BlockingProgress::progress()]
		228  167: 		 167: sent message

[thread  main]  [src/interfaces/interface.cc]
		635  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		636  155: 		 155: sanitizing user input
		636  157: 		 157: checking mpi stages error state
		636  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		637  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		638  140: 		 140: freeing item, now at 5 items : arenas 3 pointer 0x9b50e0
		638  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		639  185: 		 185: invalidating user MPI_Request handle: addr 0x67e778
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		640  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		641  568: 		 568: sanitizing user input
		641  571: 		 571: checking mpi stages error state
		641  574: 		 574: checking 0x67e780 == MPI_REQUEST_NULL 0
		641  583: 		 583: translated MPI_Request to Request_ptr: 0x9b5150
		641  587: 		 587: checking persistent 0 and inactive 0
		641  602: 		 602: checking if request complete 1
		641  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		642  155: 		 155: sanitizing user input
		642  157: 		 157: checking mpi stages error state
		642  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		643  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		644  140: 		 140: freeing item, now at 4 items : arenas 3 pointer 0x9b5150
		644  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		645  185: 		 185: invalidating user MPI_Request handle: addr 0x67e780
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		646  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Comm_rank(MPI_Comm, int*)]
		647  724: 		 724: checking mpi stages error state
		647  732: 		 732: called MPI_Comm_rank: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		648  568: 		 568: sanitizing user input
		648  571: 		 571: checking mpi stages error state
		648  574: 		 574: checking 0x67e6a0 == MPI_REQUEST_NULL 0
		648  583: 		 583: translated MPI_Request to Request_ptr: 0x77a660
		648  587: 		 587: checking persistent 0 and inactive 0
		648  602: 		 602: checking if request complete 0
		648  605: 		 605: will wait for completion
		648  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		229  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		230  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		230  121: 		 121: free_list 0x67b610
		230  124: 		 124: new free_list 0x67b628
		230  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		229  143: 		 143: received header + size of size 28
		229  148: 		 148: header: e 0 c 0 s 4 d 0 t 3072
		229  149: 		 149: payload length 21600
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		230  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		230  121: 		 121: free_list 0x2aaaabb5b010
		230  124: 		 124: new free_list 0x2aaaabb6afd8
		230  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		229  177: 		 177: received payload of size 21628
	[void exampi::BlockingProgress::progress()]
		228  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		229   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		230   59: 		  59: found requests and messages to match
		230   70: 		  70: picked up request: 0x77a660
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		231   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 4 == 4, dest 0 == 0, tag 3072 == 3072
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		230   99: 		  99: found match, generating match object
		230  103: 		 103: header 0x67b610 == 0x77a660
		230  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		231  155: 		 155: progress thread, matched header 0x67b610 == request 0x77a660
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		232  194: 		 194: handling matched request <-> protocol message
		232  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		233  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		233  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		234  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		234  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		235   31: 		  31: request lock acquired
		235   40: 		  40: notifying waiting thread
		235   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		236  217: 		 217: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		648  618: 		 618: finished waiting
		648  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		649  155: 		 155: sanitizing user input
		649  157: 		 157: checking mpi stages error state
		649  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		650  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		651  140: 		 140: freeing item, now at 3 items : arenas 3 pointer 0x77a660
		651  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		652  185: 		 185: invalidating user MPI_Request handle: addr 0x67e6a0
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		653  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		654  568: 		 568: sanitizing user input
		654  571: 		 571: checking mpi stages error state
		654  574: 		 574: checking 0x67e6a8 == MPI_REQUEST_NULL 0
		654  583: 		 583: translated MPI_Request to Request_ptr: 0x9b4f90
		654  587: 		 587: checking persistent 0 and inactive 0
		654  602: 		 602: checking if request complete 0
		654  605: 		 605: will wait for completion
		654  610: 		 610: acquired lock on request

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		237  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		238  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		238  121: 		 121: free_list 0x67b610
		238  124: 		 124: new free_list 0x67b628
		238  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		237  143: 		 143: received header + size of size 28
		237  148: 		 148: header: e 0 c 0 s 1 d 0 t 3072
		237  149: 		 149: payload length 21600
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		238  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		238  121: 		 121: free_list 0x2aaaabb5b010
		238  124: 		 124: new free_list 0x2aaaabb6afd8
		238  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		237  177: 		 177: received payload of size 21628
	[void exampi::BlockingProgress::progress()]
		238  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		239   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		240   59: 		  59: found requests and messages to match
		240   70: 		  70: picked up request: 0x9b4f90
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		241   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 1, dest 0 == 0, tag 3072 == 3072
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		240  117: 		 117: no match with request
		240   70: 		  70: picked up request: 0x9b5000
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		241   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 1, dest 0 == 0, tag 3072 == 3072
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		240   99: 		  99: found match, generating match object
		240  103: 		 103: header 0x67b610 == 0x9b5000
		240  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		241  155: 		 155: progress thread, matched header 0x67b610 == request 0x9b5000
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		242  194: 		 194: handling matched request <-> protocol message
		242  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		243  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		243  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		244  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		244  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		245   31: 		  31: request lock acquired
		245   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		246  217: 		 217: request completed and released
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		247  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		248  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		248  121: 		 121: free_list 0x67b610
		248  124: 		 124: new free_list 0x67b628
		248  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		247  143: 		 143: received header + size of size 28
		247  148: 		 148: header: e 0 c 0 s 2 d 0 t 3072
		247  149: 		 149: payload length 21600
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		248  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		248  121: 		 121: free_list 0x2aaaabb5b010
		248  124: 		 124: new free_list 0x2aaaabb6afd8
		248  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		247  177: 		 177: received payload of size 21628
	[void exampi::BlockingProgress::progress()]
		248  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		249   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		250   59: 		  59: found requests and messages to match
		250   70: 		  70: picked up request: 0x9b4f90
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		251   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 2, dest 0 == 0, tag 3072 == 3072
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		250   99: 		  99: found match, generating match object
		250  103: 		 103: header 0x67b610 == 0x9b4f90
		250  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		251  155: 		 155: progress thread, matched header 0x67b610 == request 0x9b4f90
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		252  194: 		 194: handling matched request <-> protocol message
		252  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		253  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		253  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		254  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		254  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		255   31: 		  31: request lock acquired
		255   40: 		  40: notifying waiting thread
		255   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		256  217: 		 217: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		654  618: 		 618: finished waiting
		654  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		655  155: 		 155: sanitizing user input
		655  157: 		 157: checking mpi stages error state
		655  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		656  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		657  140: 		 140: freeing item, now at 2 items : arenas 3 pointer 0x9b4f90
		657  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		658  185: 		 185: invalidating user MPI_Request handle: addr 0x67e6a8
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		659  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		660  568: 		 568: sanitizing user input
		660  571: 		 571: checking mpi stages error state
		660  574: 		 574: checking 0x67e6b0 == MPI_REQUEST_NULL 0
		660  583: 		 583: translated MPI_Request to Request_ptr: 0x9b5000
		660  587: 		 587: checking persistent 0 and inactive 0
		660  602: 		 602: checking if request complete 1
		660  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		661  155: 		 155: sanitizing user input
		661  157: 		 157: checking mpi stages error state
		661  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		662  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		663  140: 		 140: freeing item, now at 1 items : arenas 3 pointer 0x9b5000
		663  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		664  185: 		 185: invalidating user MPI_Request handle: addr 0x67e6b0
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		665  561: 		 561: returning with error: 0

[thread undef] [src/transports/udptransport.cc]
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		257  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		258  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		258  121: 		 121: free_list 0x67b610
		258  124: 		 124: new free_list 0x67b628
		258  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		257  143: 		 143: received header + size of size 28
		257  148: 		 148: header: e 0 c 0 s 4 d 0 t 0
		257  149: 		 149: payload length 8
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		258  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		258  121: 		 121: free_list 0x2aaaabb5b010
		258  124: 		 124: new free_list 0x2aaaabb6afd8
		258  132: 		 132: item is number 1
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		257  177: 		 177: received payload of size 36
	[void exampi::BlockingProgress::progress()]
		258  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		259   28: 		  28: posting message in matcher

[thread  main]  [src/interfaces/interface.cc]
	[virtual int exampi::BasicInterface::MPI_Reduce(const void*, void*, int, MPI_Datatype, MPI_Op, int, MPI_Comm)]
		666  885: 		 885: checking mpi stages error state
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		667  303: 		 303: entry MPI_Recv with buf 0x67df10 count 1 src 1 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		668  253: 		 253: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		669  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		670  484: 		 484: sanitizing user input
		670  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		671  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		672   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		673  102: 		 102: allocating N6exampi7RequestE from 3 arenas
		673  121: 		 121: free_list 0x9b5000
		673  124: 		 124: new free_list 0
		673  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		674  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		675  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		676  505: 		 505: checking mpi stages error state
		676  512: 		 512: translating request
		676  516: 		 516: persistent check
		676  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		677   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		678   97: 		  97: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		679  260: 		 260: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		680  568: 		 568: sanitizing user input
		680  571: 		 571: checking mpi stages error state
		680  574: 		 574: checking 0x7fffffffc148 == MPI_REQUEST_NULL 0
		680  583: 		 583: translated MPI_Request to Request_ptr: 0x9b5000
		680  587: 		 587: checking persistent 0 and inactive 0
		680  602: 		 602: checking if request complete 0
		680  605: 		 605: will wait for completion
		680  610: 		 610: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		260   59: 		  59: found requests and messages to match
		260   70: 		  70: picked up request: 0x9b5000
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		261   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 4, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		260  117: 		 117: no match with request
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		261  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		262  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		262  121: 		 121: free_list 0x67b628
		262  124: 		 124: new free_list 0x67b640
		262  132: 		 132: item is number 2
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		261  143: 		 143: received header + size of size 28
		261  148: 		 148: header: e 0 c 0 s 1 d 0 t 0
		261  149: 		 149: payload length 8
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		262  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		262  121: 		 121: free_list 0x2aaaabb6afd8
		262  124: 		 124: new free_list 0x2aaaabb7afa0
		262  132: 		 132: item is number 2
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		261  177: 		 177: received payload of size 36
	[void exampi::BlockingProgress::progress()]
		262  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		263   28: 		  28: posting message in matcher
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		264   59: 		  59: found requests and messages to match
		264   70: 		  70: picked up request: 0x9b5000
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		265   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 4, dest 0 == 0, tag 0 == 0
		265   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 1 == 1, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		264   99: 		  99: found match, generating match object
		264  103: 		 103: header 0x67b628 == 0x9b5000
		264  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		265  155: 		 155: progress thread, matched header 0x67b628 == request 0x9b5000
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		266  194: 		 194: handling matched request <-> protocol message
		266  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		267  140: 		 140: freeing item, now at 2 items : arenas 1 pointer 0x2aaaabb6afd8
		267  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		268  140: 		 140: freeing item, now at 2 items : arenas 1 pointer 0x67b628
		268  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		269   31: 		  31: request lock acquired
		269   40: 		  40: notifying waiting thread
		269   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		270  217: 		 217: request completed and released
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		271  115: 		 115: receive from underlying socket available
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Header]]
		272  102: 		 102: allocating N6exampi6HeaderE from 1 arenas
		272  121: 		 121: free_list 0x67b628
		272  124: 		 124: new free_list 0x67b640
		272  132: 		 132: item is number 2
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		271  143: 		 143: received header + size of size 28
		271  148: 		 148: header: e 0 c 0 s 2 d 0 t 0
		271  149: 		 149: payload length 8
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::UDPTransportPayload]]
		272  102: 		 102: allocating N6exampi19UDPTransportPayloadE from 1 arenas
		272  121: 		 121: free_list 0x2aaaabb6afd8
		272  124: 		 124: new free_list 0x2aaaabb7afa0
		272  132: 		 132: item is number 2
	[virtual exampi::Header_uptr exampi::UDPTransport::ordered_recv()]
		271  177: 		 177: received payload of size 36
	[void exampi::BlockingProgress::progress()]
		272  147: 		 147: progress thread, receiving message
	[virtual void exampi::SimpleMatcher::post_header(exampi::Header_uptr)]
		273   28: 		  28: posting message in matcher

[thread  main]  [src/interfaces/interface.cc]
		680  618: 		 618: finished waiting
		680  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		681  155: 		 155: sanitizing user input
		681  157: 		 157: checking mpi stages error state
		681  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		682  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		683  140: 		 140: freeing item, now at 1 items : arenas 3 pointer 0x9b5000
		683  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		684  185: 		 185: invalidating user MPI_Request handle: addr 0x7fffffffc148
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		685  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		686  303: 		 303: entry MPI_Recv with buf 0x67df10 count 1 src 2 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		687  253: 		 253: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		688  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		689  484: 		 484: sanitizing user input
		689  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		690  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		691   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		692  102: 		 102: allocating N6exampi7RequestE from 3 arenas
		692  121: 		 121: free_list 0x9b5000
		692  124: 		 124: new free_list 0
		692  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		693  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		694  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		695  505: 		 505: checking mpi stages error state
		695  512: 		 512: translating request
		695  516: 		 516: persistent check
		695  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		696   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		697   97: 		  97: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		698  260: 		 260: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		699  568: 		 568: sanitizing user input
		699  571: 		 571: checking mpi stages error state
		699  574: 		 574: checking 0x7fffffffc148 == MPI_REQUEST_NULL 0
		699  583: 		 583: translated MPI_Request to Request_ptr: 0x9b5000
		699  587: 		 587: checking persistent 0 and inactive 0
		699  602: 		 602: checking if request complete 0
		699  605: 		 605: will wait for completion
		699  610: 		 610: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		274   59: 		  59: found requests and messages to match
		274   70: 		  70: picked up request: 0x9b5000
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		275   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 4, dest 0 == 0, tag 0 == 0
		275   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 2 == 2, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		274   99: 		  99: found match, generating match object
		274  103: 		 103: header 0x67b628 == 0x9b5000
		274  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		275  155: 		 155: progress thread, matched header 0x67b628 == request 0x9b5000
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		276  194: 		 194: handling matched request <-> protocol message
		276  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		277  140: 		 140: freeing item, now at 2 items : arenas 1 pointer 0x2aaaabb6afd8
		277  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		278  140: 		 140: freeing item, now at 2 items : arenas 1 pointer 0x67b628
		278  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		279   31: 		  31: request lock acquired
		279   40: 		  40: notifying waiting thread
		279   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		280  217: 		 217: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		699  618: 		 618: finished waiting
		699  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		700  155: 		 155: sanitizing user input
		700  157: 		 157: checking mpi stages error state
		700  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		701  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		702  140: 		 140: freeing item, now at 1 items : arenas 3 pointer 0x9b5000
		702  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		703  185: 		 185: invalidating user MPI_Request handle: addr 0x7fffffffc148
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		704  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status*)]
		705  303: 		 303: entry MPI_Recv with buf 0x67df10 count 1 src 4 tag 0
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		706  253: 		 253: offloading persistent path with wait
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		707  224: 		 224: MPI_Recv_init
	[virtual int exampi::BasicInterface::MPI_Recv_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request*)]
		708  484: 		 484: sanitizing user input
		708  491: 		 491: checking mpi stages error state
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		709  364: 		 364: generating request object
	[exampi::Request* exampi::Universe::allocate_request()]
		710   95: 		  95: allocating request from memory pool
	[T* exampi::MemoryPool<T>::allocate(Args&& ...) [with Args = {}; T = exampi::Request]]
		711  102: 		 102: allocating N6exampi7RequestE from 3 arenas
		711  121: 		 121: free_list 0x9b5000
		711  124: 		 124: new free_list 0
		711  132: 		 132: item is number 1
	[int exampi::BasicInterface::construct_request(const void*, int, MPI_Datatype, int, int, int, MPI_Comm, MPI_Request*, exampi::Operation)]
		712  403: 		 403: request object instantiated
	[int exampi::BasicInterface::offload_persistent(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation, MPI_Request*)]
		713  241: 		 241: starting request
	[virtual int exampi::BasicInterface::MPI_Start(MPI_Request*)]
		714  505: 		 505: checking mpi stages error state
		714  512: 		 512: translating request
		714  516: 		 516: persistent check
		714  523: 		 523: posting request to progress
	[virtual void exampi::SimpleMatcher::post_request(exampi::Request_ptr)]
		715   19: 		  19: posting request in matcher
	[virtual void exampi::BlockingProgress::post_request(exampi::Request*)]
		716   97: 		  97: handed request Receive to matcher
	[int exampi::BasicInterface::offload_persistent_wait(const void*, int, MPI_Datatype, int, int, MPI_Comm, exampi::Operation)]
		717  260: 		 260: waiting for request
	[virtual int exampi::BasicInterface::MPI_Wait(MPI_Request*, MPI_Status*)]
		718  568: 		 568: sanitizing user input
		718  571: 		 571: checking mpi stages error state
		718  574: 		 574: checking 0x7fffffffc148 == MPI_REQUEST_NULL 0
		718  583: 		 583: translated MPI_Request to Request_ptr: 0x9b5000
		718  587: 		 587: checking persistent 0 and inactive 0
		718  602: 		 602: checking if request complete 0
		718  605: 		 605: will wait for completion
		718  610: 		 610: acquired lock on request

[thread undef] [src/matchers/simplematcher.cc]
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		281   59: 		  59: found requests and messages to match
		281   70: 		  70: picked up request: 0x9b5000
	[exampi::SimpleMatcher::progress()::<lambda(exampi::Header_uptr&)>]
		282   78: 		  78: testing match between request <-> header: epoch 0 == 0, comm 0 == 0, source 4 == 4, dest 0 == 0, tag 0 == 0
	[virtual std::tuple<std::unique_ptr<exampi::Header, std::function<void(exampi::Header*)> >, exampi::Request*> exampi::SimpleMatcher::progress()]
		281   99: 		  99: found match, generating match object
		281  103: 		 103: header 0x67b610 == 0x9b5000
		281  109: 		 109: matching complete, found match
	[void exampi::BlockingProgress::progress()]
		282  155: 		 155: progress thread, matched header 0x67b610 == request 0x9b5000
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		283  194: 		 194: handling matched request <-> protocol message
		283  211: 		 211: protocol message: EAGER
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::UDPTransportPayload]]
		284  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x2aaaabb5b010
		284  158: 		 158: freed item to pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Header]]
		285  140: 		 140: freeing item, now at 1 items : arenas 1 pointer 0x67b610
		285  158: 		 158: freed item to pool
	[void exampi::Request::release()]
		286   31: 		  31: request lock acquired
		286   40: 		  40: notifying waiting thread
		286   45: 		  45: released request entirely
	[void exampi::BlockingProgress::handle_match(exampi::Header_uptr, exampi::Request*)]
		287  217: 		 217: request completed and released

[thread  main]  [src/interfaces/interface.cc]
		718  618: 		 618: finished waiting
		718  624: 		 624: finalizing request
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		719  155: 		 155: sanitizing user input
		719  157: 		 157: checking mpi stages error state
		719  177: 		 177: deallocating request immediately
	[void exampi::Universe::deallocate_request(exampi::Request_ptr)]
		720  101: 		 101: freeing request to memory pool
	[void exampi::MemoryPool<T>::deallocate(T*) [with T = exampi::Request]]
		721  140: 		 140: freeing item, now at 1 items : arenas 3 pointer 0x9b5000
		721  158: 		 158: freed item to pool
	[virtual int exampi::BasicInterface::MPI_Request_free(MPI_Request*)]
		722  185: 		 185: invalidating user MPI_Request handle: addr 0x7fffffffc148
	[int exampi::BasicInterface::finalize_request(MPI_Request*, exampi::Request*, MPI_Status*)]
		723  561: 		 561: returning with error: 0
	[virtual int exampi::BasicInterface::MPI_Finalize()]
		724  144: 		 144: MPI_Finalize
		724  148: 		 148: Finalize returns
	[virtual exampi::BlockingProgress::~BlockingProgress()]
		725   52: 		  52: halting all progress threads
		725   55: 		  55: informed all threads to shutdown
		725   61: 		  61: joined all threads
	[exampi::Universe::~Universe()]
		726   86: 		  86: terminating universe
